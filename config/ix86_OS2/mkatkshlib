#!/bin/sh
# mkatkshlib for OS/2 with EMX.

dynclasses=""
if [ "x$1" = "x-D" ]; then
	# Build a dynamic object.
	# Next argument is a list of classes implemented by the object.
	# We currently ignore this list and read $name.rf instead.
	shift
	# dynclasses="$1"
	shift
fi

name="$1"
shift
basedir="$1"
shift
linkprefix="$1"
shift
dynclasses="`sed '/^===$/,$d;/[^A-Za-z]/d' $name.rf`"
shortname="`echo $name | cut -c1-6`"
dllname="a-$shortname" # make it unique for ATK.

# Create list of .o files from the remaining command line.
objs=""
for ename in $*; do
      case "$ename" in
	*.o)	objs="$ename $objs"
		;;
      esac
done

print "Creating module definition ..."
print "LIBRARY $dllname INITINSTANCE TERMINSTANCE\nDATA LOADONCALL READWRITE NONSHARED\nEXPORTS" > $name.def
print "  \"${name}_main_\" @1 NONAME" >> $name.def
emxexp -n -o2 $objs >> $name.def

# Need a way to get compiler and options to this script...
gcc -g -Zomf -Zcrtdll -DUSE_GCCPRAGMA -I$basedir/include -I$basedir/include/atk -c _E_$name.C -o _E_$name.o

print "Creating lib$name.a ..."
emximp -o lib$name.lib $name.def
mv lib$name.lib lib$name.a

print "Creating $dllname.dll ..."
gcc -Zomf -Zdll -Zcrtdll $name.def -Zmap=$name.map -o $dllname.dll _E_$name.o $* -Le:/emx/lib
ret="$?"

touch $name.dll	# fake out make

rm -f _E_$name.C _E_$name.o

if [ "$ret" -ne 0 ]; then
  # cleanup the mess if the link failed
  rm -f $dllname.dll $name.dll lib$name.a
fi
exit $ret



