\begindata{text,17251000}
\textdsversion{12}
\template{help}
\define{keyword
}
\chapter{C++Proto: Convert header files to C++

}
\section{What C++Proto is

}\leftindent{
\italic{C++Proto} prototypes functions in header files (.h files) of C source 
code. The resulting header files can then be used by C++ ATK source code. 
(Some hand-tuning will probably be necessary.)


\italic{C++Proto} can be used either

	- to prototype .h files for .c files that you plan to convert to C++, or 

	- to prototype .h files for .c files that you plan to leave in C. (This is 
useful if you have C libraries or modules which are to be used by C++ ATK 
classes, but which are not themselves to be converted.)


The former mode is the default; you indicate the latter with the 
\typewriter{-c} switch.

}
\section{Starting C++Proto

}\leftindent{
\typewriter{C++Proto [ -c ] \italic{files...} [ --- 
\italic{\italic{classindexes...}} ]}}\typewriter{\italic{

}}
\leftindent{\italic{files...} should be a list of .h and .c files.

\italic{classindexes...} is a list of class index files (generated by 
\italic{C++Index}). 


\italic{C++Proto} will prototype each .h file, adding function prototypes 
according to the information in the .c files. (The original .h file is copied 
to a backup file, with the suffix .h.orig.) The .c files themselves are not 
affected.


The class index files must include information on every class whose header 
(.ih or .eh file) is #included in one of the .h files. There is a standard 
class index file which contains all the classes in the standard ATK 
distribution; this file is automatically included, and need not be listed in 
\italic{classindexes...} (See the help file on \italic{C++Index}.) If none of 
the .h files include class headers for classes you wrote, you may omit the 
\typewriter{--- classindexes...} arguments.


By default, \italic{C++Proto} assumes that the .c files are going to be 
converted to C++. Therefore, types in prototype arguments are \italic{not} 
promoted. 


If the .h files in question are for .c files that are \italic{not} to be 
converted to C++, you should use the -c option. In this case, the prototypes 
will be surrounded by macros that declare them  \typewriter{extern "C"}. Also, 
base types in function arguments are promoted; that is, \italic{char} and 
\italic{short} arguments will be declared as \italic{int} in the prototypes, 
and \italic{float} arguments will be declared as \italic{double}. 

}
\section{Warnings

}\leftindent{
For irritating technical reasons, \italic{C++Proto} can\italic{ not} parse .C 
files (code that has already been converted to C++.) Therefore, if you want to 
prototype headers for files that you are converting to C++, you should run 
\italic{C++Proto} before \italic{C++Conv}. If you don't, make sure you keep 
the original .c files around so that you can feed them into \italic{C++Proto}. 


If you accidentally delete the .c files before you run \italic{C++Proto}, it's 
too late; you will have to prototype the .h files by hand. This is not too 
difficult, however. The converted .C files will already have prototypes in 
them, just before the first function declaration, so you can copy those into 
the .h file and add "extern" where necessary.


\italic{C++Proto} is a shell script that calls a Ness script. You must be able 
to run the ATK application \italic{nessrun} in order to use it.


Be sure that when you convert a header file, you include all the .c files that 
contain the functions it defines, in a single call to \italic{C++Proto}.

}
\section{Hand-Tuning

}
\leftindent{\italic{C++Proto} does the best it can to create working C++ code. 
Life being what it is, however, it does not always succeed. (Guessing the 
return type of macromethods is particularly difficult.) The .H files that are 
generated may contain the following strings, which you must find and replace 
with correct information.


MISSING_DEFINITION: No definition could be found for the next function 
declaration.  

MISSING_ARGUMENT_TYPE: No type could be found for the following function 
argument.

MISSING_RETURN_TYPE: No type could be found for the return value of the 
following function.


}\section{Limitations

}
\leftindent{#if directives may confuse the parser, though in most cases it can 
cope.  If there are multiple definitions of a function, the prototype of the 
first will be used for any extern declarations in header files.


Macros used in the construction of function definitions may confuse the 
converter.  Unfortunately, this includes macros designed to allow code to 
compile both with and without prototypes (ie, macros designed to make code 
acceptable to both ANSI and non-ANSI C compilers.)


A number of special names are recognized as synonyms for storage classes. 
 (CONST, STATIC, GLOBAL, GVAR, GLOCAL, METHODDEF, etc...)

}
\section{Diagnostics 

}
\leftindent{\italic{!!! READONLY !!!

}A file to be converted was not writable.


\italic{write failed!

}The output file couldn't be written.


\italic{expected ']' after array size specification.

couldn't parse start decl from: <text>

bad decl end... restarting at next semicolon (or function body) after: <text>

expected close paren after <function>

expected paren after <function>

}These are low-level errors, indicating either a C syntax error or a bug in 
the converter. The resulting files may be syntactically incorrect, or 
otherwise corrupted.


The converter may also produce warning messages similar to \italic{C++Conv} if 
it gets confused when reading the .c files. If so, the resulting .h files are 
probably not corrupted, although there may be extra MISSING markers due to 
lack of information from the .c files.


}\enddata{text,17251000}
