\begindata{text,17192108}
\textdsversion{12}
\template{help}
\chapter{Conversion of your ATK code from C to C++

}
\leftindent{So the AUIS distribution has been converted to C++. How 
marvelous! We had such a good time. Now it's your turn.


If you have written applications or objects using ATK, it will be necessary 
to convert them to C++, so that they can function in the new AUIS 
environment. A number of conversion tools are available, which will do some 
of the work automatically. However, as you might expect, there will be a 
moderate amount of massaging and fine-tuning that you will have to do by 
hand.


A quick note: this document is about converting programs. If you do not 
write AUIS applications, you don't need to read this.

}
\section{Overview of Conversion}

\leftindent{
This is an overview of the conversion process. For complete explanations of 
the conversion utilities \italic{\helptopic{C++Index}}, 
\italic{\helptopic{C++Proto}}, and \italic{\helptopic{C++Conv}}, and the 
\helptopic{\italic{genstatl}} application, see their respective help files.


\subsection{Planning}


The first thing you need to do is decide what parts of your application 
need to be converted to C++. All source code for ATK classes must be 
converted; however, depending on how you have organized your project, there 
may be modules or libraries that can be left in C. (For example, in AMS, 
the \italic{messages} application class and the classes it uses were 
converted to C++, but the message client libraries were left in C.)


If you do decide to leave some code in C, it will probably still be 
necessary to convert or create header files for it. This is because C++ is 
very strict about function declarations; it insists on having a 
properly-prototyped declaration before an external function is called. 


\subsection{Creating a Class Index File}


The next step is to create a class index file from your class header (.ch) 
files, using the \italic{C++Index} utility. A class index file contains 
information about one or several ATK classes (information such as ancestor 
classes and method names.) The \italic{C++Proto} and \italic{C++Conv} 
conversion utilities need class index files in order to work; they need to 
be able to look up information about every class used by the code they 
convert.


The ATK distribution comes with a class index file containing information 
about all the classes in the distribution. This is automatically read in by 
the conversion utilities. Therefore, you need only create a class index 
file describing the classes you have created. 


\subsection{Prototyping .h Files}


Next, if your project uses any header (.h) files that declare functions, 
you must make them into complete function prototypes, including argument 
types. (If you have been using an ANSI C compiler, you may already have 
functions completely prototyped. If so, you need do nothing else.)


The \italic{C++Proto} utility does this for you. You give it a list of .h 
files, and the .c files in which the functions are defined, and it adds 
prototypes to the declarations in the .h files. Note that \italic{C++Proto} 
creates C++ prototypes by reading in \italic{unconverted} .c files. If you 
want to prototype declarations in .h files for which you only have C++ 
source code available, you will have to do it by hand. 


If you are leaving part of your project in C, and that part includes .h 
files which are to be included in your C++ code, you must also prototype 
those .h files. This works in exactly the same way, except that you run 
\italic{C++Proto} with the \typewriter{-c} switch. 


\subsection{Converting .c Files}


Now you are ready to convert the actual C source files to C++ source files. 
The \italic{C++Conv} utility does this. It reads in a list of .c files, and 
creates equivalent .C files containing C++ code. It also creates a .H 
header file for each ATK class you created; these .H files contain the 
class definitions, much as the .ch files did for C ATK code.


\subsection{Fixing Things Up}


\italic{C++Proto} and \italic{C++Conv} are not always able to convert code 
perfectly. You will have to search through each converted file for error 
markers; these usually indicate function or argument types that could not 
be determined. Delete each error marker and replace it with the appropriate 
information.


Error markers always begin with "MISSING", so you can easily search for 
them with a command like

	\typewriter{grep MISSING *.h *.C *.H}


See the \italic{\helptopic{C++Proto}} and \italic{\helptopic{C++Conv}} help 
files for more information on error markers.


\subsection{Updating your Imakefile}


An Imakefile for C++ ATK code creates libraries, rather than dynamic object 
files. Creating the executable comes later; that is done with 
\italic{genstatl}, and must be done in a \italic{different} directory than 
the one used for compiling the code. 


You can put all the ATK classes for your application in one library, or 
divide them up, at your discretion. (Classes should be grouped in the same 
library if they're usually used together.) 


For this Imakefile, you should do the following. (This assumes that you're 
putting all your classes in one library named \italic{libname}. If you're 
making several libraries, just create several OBJS and LIBS lists.)

\leftindent{Remove the list of dynamic objects (usually DOBJS), and remove 
the rules that create dynamic objects.

Create a list OBJS, listing all the .o files needed for the library.

Create a list HFILES, listing the .H files for your classes.

Create a LIBS list, listing all libraries that your library depends on. 
(Remember that you must include all the ATK object libraries for the 
classes that you use.)

Be sure the rules include:

\leftindent{NormalObjectRule()

NormalATKRule()

ATKLibraryTarget(\italic{libname}, $(OBJS), $(LIBS) $(LIBPATHS))

InstallATKLibrary(\italic{libname}, $(DESTDIR)/lib/atk)

InstallClassFiles($(HFILES))

}}

\subsection{Compiling, and More Fixing Things Up}


Now comes the fun part: getting it to compile. Since C++ is much more 
persnicketty about types than C, you'll probably have to adjust a lot of 
things here and there -- adding casts, changing function arguments, etc. 
The changes in naming conventions may also cause some namespace collisions 
that you'll have to fix. And, of course, any number of other things might 
go wrong. 


Once the libraries are properly compiled and installed, you can create an 
executable.


\subsection{Creating an Executable with \italic{\helptopic{genstatl}}}


Create a new directory (typically called "\italic{appname}dir", where 
appname is the name of the application.) This is necessary because 
\italic{genstatl} generates an Imakefile, which will overwrite any 
Imakefile which already exists.

\italic{cd} into the new directory.


Type

\typewriter{\smaller{\leftindent{% \bold{genstatl -d . -e \italic{appname}}

}}}This creates, in the current directory, an Imakefile and a file called 
statl.C. The Imakefile is set up to create an executable called 
\italic{appname}. The executable will be linked with all the classes needed 
to run the application whose application class in named 
\italic{appname}app.


(If you want to link other classes into the executable --  extra inset 
types for an editing application, for example -- you can use the 
\typewriter{-c} switch to \italic{\helptopic{genstatl} }. If you want to 
use an application class whose name doesn't end with "app", use the 
\typewriter{-a} and \typewriter{-c} switches. See the help file for what 
all of these mean.)


Now that you have an Imakefile, type \italic{genmake} and \italic{make all} 
to create the executable. 


}\section{An Example

}
\leftindent{Here is an example of converting a project to C++, with rather 
superficial explanations. You should look at the other help files to 
understand exactly what is going on.


Say we have a terribly simple application:


\typewriter{\smaller{\leftindent{% \bold{ls} 

Imakefile

frogapp.c

frogapp.ch

tad.c

tad.h

}}}
We will convert the class frogapp to C++, but not tad.c.


First we create the class index file, by running \italic{C++Index} on the 
current directory and storing the output in a file:


\typewriter{\smaller{\leftindent{% \bold{C++Index . > classinfo}

}}}
Then we prototype tad.h, using the class information in the class index 
file:


\typewriter{\smaller{\leftindent{% \bold{C++Proto -c tad.c tad.h --- 
classinfo}

% \bold{ls}

Imakefile

classinfo

frogapp.c

frogapp.ch

tad.c

tad.h

tad.h.orig

}}}
tad.h has now been updated (tad.h.orig is a backup of the original tad.h.)


Now we convert frogapp.c, again using classinfo:


\typewriter{\smaller{\leftindent{% \bold{C++Conv frogapp.c --- classinfo}

% \bold{ls}

Imakefile

classinfo

frogapp.C

frogapp.H

frogapp.c

frogapp.ch

tad.c

tad.h

tad.h.orig

}}}
Note that the frogapp.ch file has automatically been converted to 
frogapp.H.


Now we check for error markers:


\typewriter{\smaller{\leftindent{% \bold{grep -n MISSING *.h *.C *.H}

frogapp.H:28:   virtual void croak (MISSING_ARGUMENT_TYPE tongue);

}}}
We edit frogapp.H to put in the argument type.

We then update the Imakefile, and compile. Since this is a fictional 
example, it compiles perfectly. Install the resulting libraries.


Now we create the application directory and run \italic{genstatl}:


\typewriter{\smaller{\leftindent{% \bold{mkdir ../frogdir}

% \bold{cd ../frogdir}

% \bold{genstatl -d . -e frog}

% \bold{genmake}

% \bold{make all}

}}}
And lo, there is a functional application. Once you fix everything that's 
gone wrong.

}
\section{Related tools}  


\leftindent{Move your mouse cursor to one of the following names and click 
your left mouse button to see the help file for:


}\leftindent{\italic{\helptopic{C++Index}

\helptopic{C++Proto}

\helptopic{C++Conv}

\helptopic{genstatl}

}}
\enddata{text,17192108}
