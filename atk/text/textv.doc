\begindata{text,538442812}
\textdsversion{12}
\template{default}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\define{fieldheading
menu:[Region~4,Fieldheading]
attr:[Justification LeftJustified Point 0]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fieldtext
menu:[Region~4,Fieldtext]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\section{\paramname{textview}}


The class\italic{ \paramname{textview}} (text view) provides the methods can 
class procedures needed to view \italic{text} on a workstation screen and to 
edit that \italic{text}. 



\section{About this section}


The class \paramname{textview} is a subclass of \paramname{view} and 
\paramname{observable}.  This section assumes you are familiar with the 
following:


-- class

-- view

-- observable

-- text


This section is related to the sections \italic{text,} \italic{environment}, 
and \italic{style.}  \italic{Example 14}, \italic{Vol. 1}, illustrates how to 
use \italic{text/textview} in an application program.  \italic{Example 15}, 
\italic{Vol. 1}, illustrates how to format \italic{text} using 
\italic{environment} and \italic{style}.


\section{About \paramname{textview}}


\paragraph{The dot}


The dot is used to represent (1) the current position of the text caret and 
(2) the starting position and length of a selected region.  The dot has a 
position and a length.  The length is zero when the user sees the text caret; 
positive when the user creates a selected region.  Normally, the characters 
that a user types should be inserted at the dot's position;  likewise 
formatting commands should be take effect from the dot's starting position to 
its length. 

\begindata{bp,538271496}
\enddata{bp,538271496}
\view{bpv,538271496,206,0,0}

\section{\paramname{textview} functions}


______________________________________________________				


\paragraph{textview_CanView}

				

\majorheading{Check whether textview can view the object}

______________________________________________________


\fixedtext{boolean \bold{textview_CanView }(}\fixedindent{

struct textview *\paramname{textview},

char *\paramname{TypeName});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Checks whether \paramname{textview} can view the dataobject 
specified by \paramname{TypeName} by comparing its type to "text."


}
\fieldheading{Return Value}

\fieldtext{TRUE if \paramname{textview} can view \paramname{TypeName;} FALSE 
otherwise.}



\fieldheading{See Also}

\fieldtext{\paramname{class_IsTypeByName} (class/doc/class.doc).}

\begindata{bp,538271560}
\enddata{bp,538271560}
\view{bpv,538271560,207,0,0}
______________________________________________________				


\paragraph{textview_CollapseDot}

				

\majorheading{Collapse the dot by setting the dot length to zero}

______________________________________________________


\fixedtext{void \bold{textview_CollapseDot }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Collapses \paramname{textview}'s dot by setting the dot length to 
zero.


}
\fieldheading{Side Effects}

\fieldtext{Sets the position of \paramname{textview}'s dot to the old position 
plus the old length.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_GetDotLength}, 
\paramname{textview_GetDotPosition}, \paramname{textview_FrameDot}, 
\paramname{textview_SetDotLength}, \paramname{textview_SetDotPosition}.}

\view{bpv,538271560,208,0,0}
______________________________________________________				


\paragraph{textview_DeleteApplicationLayer}

				

\majorheading{Delete the application layer, namely, the scroll bar}

______________________________________________________


\fixedtext{void \bold{textview_DeleteApplicationLayer }(}\fixedindent{

struct textview *\paramname{textview},

struct view *\paramname{scrollbar});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Deletes \paramname{scrollbar},  \paramname{textview}'s application 
layer.}



\fieldheading{Side Effects}

\fieldtext{Sets \paramname{textview}'s field \paramname{hasApplicationLayer} 
to FALSE.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_GetApplicationLayer.  }For a discussion of 
application layers, see atk/basics/common/view.doc.}

\view{bpv,538271560,209,0,0}
______________________________________________________				


\paragraph{textview_DesiredSize}

				

\majorheading{Negotiates the desired size of textview with a parent view}

______________________________________________________


\fixedtext{enum view::DSattributes \bold{textview_DesiredSize }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{width},

long \paramname{height},

enum view::DSpass \paramname{pass},

long *\paramname{dWidth},

long *\paramname{dHeight});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Conducts size negotiations between a parent view and 
\paramname{textview}.  The parameters \italic{\paramname{width} and 
 \paramname{height}} are the parent view's preferred width and height; the 
parameter  \italic{\paramname{pass}} allows the parent view to tell 
\paramname{textview} which parameters are flexible and which are fixed.  It 
can take on one of three values: 


\leftindent{\description{\fixedindent{\smaller{view::NoSe}t\formatnote{@\\}Both 
dimensions are flexible. 


\smaller{view::}WidthSet\formatnote{@\\}The width cannot be changed. 


\smaller{view::}HeightSet\formatnote{@\\}The height cannot be changed.}

}
}
In response to these three parameters, \paramname{text\italic{view::DesiredSize}} 
sets \italic{\paramname{dWidth}} and \paramname{\paramname{dHeigh}t}\italic{, 
which indicate }what \paramname{textview} desires as its width and height.

}
\fieldheading{Return Value}

\fieldtext{The return value is an \smaller{OR-ed} combination two 
\italic{\paramname{DSattributes}}, \paramname{view::WidthFlexible} | 
\paramname{view::HeightFlexible}, indicating that both \paramname{textview}'s 
width and height are flexible.}



\fieldheading{Usage}

\fieldtext{Call \paramname{textview_DesiredSize} if you want a parent view to 
negotiate a \paramname{textview}'s size.  You can call it several times.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_GetTextSize}, \paramname{textview_WantNewSize}, 
and \paramname{view::DesiredSize} (atk/basics/common/view.doc).}

\view{bpv,538271560,210,0,0}
______________________________________________________				


\paragraph{textview_FinalizeObject}

				

\majorheading{Finalize the textview object}

______________________________________________________


\fixedtext{void \bold{textview_FinalizeObject }(}

\fixedindent{struct textview *textview);}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Deletes \paramname{textview} and any data pointed to by 
\paramname{textview} (e.g., styles, view references, etc.)



}\fieldheading{Usage}\fieldtext{

Use this to delete instances of \paramname{textview}.}


\fieldheading{See Also}

\fieldtext{\paramname{textview_InitializeObject}; \paramname{FinalizeObject} 
(class/doc/class.doc).}

\view{bpv,538271560,211,0,0}
______________________________________________________				


\paragraph{textview_FindLineNumber}

				

\majorheading{Find a line number}

______________________________________________________


\fixedtext{long \bold{textview_FindLineNumber }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{pos});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Finds the line number associated with position 
\italic{\paramname{pos} in \paramname{textview}.


}}
\fieldheading{Return Value}

\fieldtext{The line number, 0 <= i <= number of lines; -1 upon error.}

\view{bpv,538271560,212,0,0}
______________________________________________________				


\paragraph{textview_FrameDot}

				

\majorheading{Set the frame dot mark}

______________________________________________________


\fixedtext{void \bold{textview_FrameDot }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{pos});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Sets \paramname{textview}'s frame dot mark to \paramname{pos}.


}
\fieldheading{Usage}

\fieldtext{Call only to ensure that \italic{\paramname{pos}} will be visible 
on the screen after the next update.}

\view{bpv,538271560,213,0,0}
______________________________________________________				


\paragraph{textview_FullUpdate}

				

\majorheading{Fully update the screen}

______________________________________________________


\fixedtext{void \bold{textview_FullUpdate }(}\fixedindent{

struct textview *\paramname{textview},

enum view::UpdateType \paramname{type},

long \paramname{left},

long \paramname{top},

long \paramname{width},

long \paramname{height});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Fully updates (i.e., redraws) the part the screen allocated to 
\paramname{textview}.  Ignores the parameters \paramname{type}, 
\paramname{left}, \paramname{top}, \paramname{width} and \paramname{height}.

}
\fieldheading{Usage}

\fieldtext{If you are using \paramname{textview} as a child view, call this 
method when the parent view gets a \paramname{FullUpdate} request.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_Update}; \paramname{view::FullUpdate} 
(atk/basics/common/view.doc).}

\view{bpv,538271560,214,0,0}
______________________________________________________				


\paragraph{textview_GetApplicationLayer}

				

\majorheading{Get an application layer, namely, create a scroll bar}

______________________________________________________


\fixedtext{struct view *\bold{textview_GetApplicationLayer }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Get an application layer.  In this case, if \paramname{textview}-> 
\paramname{hasApplicationLayer} is set to TRUE, create a scrollbar on the left 
side of \paramname{textview}}\fieldtext{.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{A pointer to the newly created scrollbar view; NULL upon error.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_GetApplicationLayer.  }For a discussion of 
application layers, see atk/basics/common/view.doc.}

\view{bpv,538271560,215,0,0}
______________________________________________________				


\paragraph{textview_GetClickPosition}

				

\majorheading{Help manage the selection region behavior for textview}

______________________________________________________


\fixedtext{void \bold{textview_GetClickPosition }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{position},

long \paramname{numberOfClicks},

enum view::MouseAction \paramname{action},

long \paramname{startLeft},

long \paramname{startRight},

long *\paramname{leftPos},

long *\paramname{rightPos});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Helps to manage the selection region behavior of 
\paramname{textview}. The parameters are:


\fieldtext{\paramname{position} -- the position at which the user has clicked

\paramname{numberOfClicks} -- the number of clicks (one, two or three).

\paramname{action} --  the type of mouse action (view::LeftDown or 
view::LeftMovement)

\paramname{startLeft}  -- the position of the old dot

\paramname{startRight} -- the position of the old dot plus the length of the 
old dot}


In response to these parameters, \paramname{text\italic{view::GetClickPosition}} 
sets \paramname{leftPos} to the position of the a new selection region and 
sets \paramname{rightPos} to the position of a new selection region plus its 
length.  Note that the method does not actually change \paramname{textview}'s 
position.

}
\fieldheading{Usage}

\fieldtext{Used for managing mouse hits in \paramname{textview}.  See 
\paramname{help selection} for a description of mouse hit behavior for 
\paramname{textview}.}

\view{bpv,538271560,216,0,0}
______________________________________________________				


\paragraph{textview_GetDefaultStyle}

				

\majorheading{Get the default style}

______________________________________________________


\fixedtext{struct style *\bold{textview_GetDefaultStyle }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Gets \paramname{textview}'s default style.


}
\fieldheading{Return Value}

\fieldtext{A pointer to the default style.

}
\fieldheading{See Also}

\fieldtext{\paramname{textview_SetDefaultStyle}.}

\view{bpv,538271560,217,0,0}
______________________________________________________				


\paragraph{textview_GetDotLength}

				

\majorheading{Get the length of the dot}

______________________________________________________


\fixedtext{long \bold{textview_GetDotLength }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Gets the length of \paramname{textview}'s dot.


}
\fieldheading{Return Value}

\fieldtext{The length of textview's dot, 0 < = length <= the length of 
\paramname{textview}.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_SetDotLength}.}

\view{bpv,538271560,218,0,0}
______________________________________________________				


\paragraph{textview_GetDotPosition}

				

\majorheading{Get the position of the dot}

______________________________________________________


\fixedtext{long \bold{textview_GetDotPosition }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Get the position of \paramname{textview}'s dot.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{The position of \paramname{textview}'s dot, 0 < = position <= the 
length of \paramname{textview}.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_SetDotPosition}.}

\view{bpv,538271560,219,0,0}
______________________________________________________				


\paragraph{textview_GetInterface}

				

\majorheading{Get the scroll bar interface}

______________________________________________________


\fixedtext{char *\bold{textview_GetInterface }(}\fixedindent{

struct textview *\paramname{textview},

char *\paramname{interfaceName});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{If \paramname{interfaceName} is "scroll,vertical," provides a 
scrollbar interface for \paramname{textview}.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{A scrollbar interface or NULL.


}
\fieldheading{See Also}

\fieldtext{See \paramname{Example 6, Scroll bars} 
 (atk/examples/ex6/example.doc) and  \paramname{view::GetInterface} 
(atk/basics/common/view.doc) for a discussion of the scroll bar interface.}


\view{bpv,538271560,220,0,0}
______________________________________________________				


\paragraph{textview_GetOrigin}

				

\majorheading{Get textview's desired origin}

______________________________________________________


\fixedtext{void \bold{textview_GetOrigin }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{width},

long \paramname{height},

long *\paramname{originX},

long *\paramname{originY});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Allows communication about the origin of \paramname{textview}'s 
rectangle.  The parameters \italic{\paramname{width} and  \paramname{height}} 
are the size of \paramname{textview}'s rectangle.  In response to these two 
parameters, \paramname{textview_GetOrigin} sets  \paramname{originX}  and 
\paramname{originY}  to the (x,y) coordinate where it would like the parent to 
place its origin.}



\fieldheading{Usage}

\fieldtext{Used to properly position a view that is being inserted inline 
along a text's baseline.

}

\fieldheading{See Also}

\fieldtext{\paramname{view::GetOrigin} (atk/basics/common/view.doc).}

\view{bpv,538271560,221,0,0}
______________________________________________________				


\paragraph{textview_GetTextSize}

				

\majorheading{Get the size of the text}

______________________________________________________


\fixedtext{void \bold{textview_GetTextSize }(}\fixedindent{

struct textview *\paramname{textview},

long *\paramname{width},

long *\paramname{height});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Sets \paramname{width} and \paramname{height} to the size of the 
text (i.e., to \paramname{textview}'s logical rectangle adjusted for the 
whitespace border).


}
\fieldheading{See Also}

\fieldtext{For a discussion of logical rectangle, see graphic.doc 
(atk/basics/common/graphic.doc).}

\view{bpv,538271560,222,0,0}
______________________________________________________				


\paragraph{textview_GetTopPosition}

				

\majorheading{Function description}

______________________________________________________


\fixedtext{long \bold{textview_GetTopPosition }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{What does it do?  What are the arguments?  Can arguments be NULL? 
Assumptions about paths or environment? etc. }


\fieldtext{The following comment was in the .ch file:

<no comment was found>

}

\fieldheading{Return Value}

\fieldtext{What does it return?}



\fieldheading{Usage}

\fieldtext{When would you use this?  When would you not use this?  When would 
you use something else instead of this?

}

\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}



\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}



\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}



\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}



\fieldheading{Example}

\fieldtext{Concrete example.

}\
\view{bpv,538271560,223,0,0}
______________________________________________________				


\paragraph{textview_Hit}

				

\majorheading{Manage mouse hits}

______________________________________________________


\fixedtext{struct view *\bold{textview_Hit }(}\fixedindent{

struct textview *\paramname{textview},

enum view::MouseAction \paramname{action},

long \paramname{x},

long \paramname{y},

long \paramname{numberOfClicks});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Manages \paramname{textview}'s mouse hits.  The parameter 
\italic{\paramname{action}} defines the type of mouse input that has occurred 
and can have the following values: 


\formatnote{\fieldtext{\italic{view::NoMouseEvent}\formatnote{@\\}No mouse 
action.


\italic{view::LeftDown}\formatnote{@\\}Left button pressed down.


\italic{view::LeftUp}\formatnote{@\\}Left button let up.


\italic{view::LeftMovement}\formatnote{@\\}Left button down and mouse has 
moved.


\italic{view::RightDown}\formatnote{@\\}Right button pressed down.


\italic{view::RightUp}\formatnote{@\\}Right button let up.


\italic{view::RightMovement}\formatnote{@\\}Right button down and mouse has 
moved.}

}
The coordinates \italic{\paramname{x}} and \italic{\paramname{y}} provide the 
location of the the mouse event, relative to the \paramname{textview}'s own 
coordinate system.  The parameter \italic{\paramname{numberOfClicks}} is the 
number of times the mouse button was clicked at that location.}


\fieldheading{Return Value}

\fieldtext{The view, possibly a child of \paramname{textview}, that accepted 
the mouse event.}



\fieldheading{Usage}

\fieldtext{Use to pass a mouse hit to a child \paramname{textview}.  If a 
mouse event occurs in a region of the screen allocated to a 
\paramname{textview}, usually the correct thing to do is simply pass the mouse 
hit to the \paramname{textview} by calling \paramname{textview_Hit}.}



\fieldheading{See Also}

\fieldtext{For a discussion of parent-child protocols for handling mouse hits, 
see Example 17 (atk/examples/ex17/example17.doc) and view::Hit 
(atk/basics/common/view.doc).}

\view{bpv,538271560,224,0,0}
______________________________________________________				


\paragraph{textview_InitChildren}

				

\majorheading{Initialize any children}

______________________________________________________


\fixedtext{void \bold{textview_InitChildren }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Examines \paramname{textview}'s text for all children and, if 
appropriate, creates views for them and links them into the view tree. 
 Recursively calls \paramname{view::InitChildren} on all children.


}
\fieldheading{Usage}

\fieldtext{Would usually be invoked as a parent if \paramname{textview} is a 
child by calling \paramname{view::InitChildren}.


}
\fieldheading{See Also}

\fieldtext{ \paramname{view::InitChildren} (atk/basics/common/view.doc).}

\view{bpv,538271560,225,0,0}
______________________________________________________				


\paragraph{textview_InitializeClass}

				

\majorheading{Initialize the class}

______________________________________________________


\fixedtext{boolean \bold{textview_InitializeClass }(}\fixedindent{);}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Initializes the class \paramname{textview} upon its first being 
loaded.  In particular, it initializes a keymap for the class and the 
preference for whether styles are exposed upon start up.

}

\fieldheading{Return Value}

\fieldtext{Always returns TRUE.}



\fieldheading{Usage}

\fieldtext{Called in \paramname{textview_New}; not called directly by the 
application programmer.}



\fieldheading{See Also}

\fieldtext{For a discussion of \paramname{InitializeClass}, see class.doc 
(class/doc/class.doc) and Example 4 (examples/ex4/example4.doc).}

\view{bpv,538271560,226,0,0}
______________________________________________________				


\paragraph{textview_InitializeObject}

				

\majorheading{Initialize an instance of textview}

______________________________________________________


\fixedtext{boolean \bold{textview_InitializeObject }(}

\fixedindent{struct textview *\paramname{self});}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Initializes \paramname{textview}, and instance of the class 
textview.  In particular, it initializes internal variables and creates a 
keystate, a menulist and default styles.


}\fieldheading{Return Value}

\fieldtext{Always returns TRUE.}



\fieldheading{Usage}

\fieldtext{Used by \paramname{textview_New}; not used by the application 
programmer directly.}



\fieldheading{See Also}

\fieldtext{For a discussion o}\fieldtext{f \paramname{InitializeObject}, see 
class.doc (class/doc/class.doc) and Example 2 (examples/ex2/example2.doc).}

\view{bpv,538271560,227,0,0}
______________________________________________________				


\bold{textview_LineRedraw}

				

\majorheading{Function description}

______________________________________________________


\fixedtext{long \bold{textview_LineRedraw }(}\fixedindent{

struct textview *\paramname{textview},

enum textview_LineRedrawType \paramname{type},

struct mark \paramname{currentLine},

long \paramname{x},

long \paramname{y},

long \paramname{xSize},

long \paramname{ySize},

long \paramname{search},

boolean *\paramname{cont},

long *\paramname{textheight},

struct formattinginfo *\paramname{info});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{What does it do?  What are the arguments?  Can arguments be NULL? 
Assumptions about paths or environment? etc. }


\fieldtext{The following comment was in the .ch file:

<no comment was found>

}

\fieldheading{Return Value}

\fieldtext{What does it return?}



\fieldheading{Usage}

\fieldtext{When would you use this?  When would you not use this?  When would 
you use something else instead of this?

}

\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}



\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}



\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}



\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}



\fieldheading{Example}

\fieldtext{Concrete example.}

\view{bpv,538271560,228,0,0}
______________________________________________________				


\paragraph{textview_LinkTree}

				

\majorheading{Link a textview into the view tree}

______________________________________________________


\fixedtext{void \bold{textview_LinkTree }(}\fixedindent{

struct textview *\paramname{textview},

struct view *\paramname{parent});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Links \paramname{textview} and any of its children into 
\paramname{parent}'s view tree.


}
\fieldheading{Usage}

\fieldtext{Before drawing in a child \paramname{textview} or passing events to 
it, a parent should call \paramname{textview_LinkTree}.}



\fieldheading{See Also}

\fieldtext{\paramname{view::LinkTree} (atk/basics/common/view.doc) for a 
discussion of view trees.}

\view{bpv,538271560,229,0,0}
______________________________________________________				


\paragraph{textview_Locate}

				

\majorheading{Locate a child view}

______________________________________________________


\fixedtext{long \bold{textview_Locate }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{x},

long \paramname{y},

struct view **\paramname{view});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{If there is a child view at (x,y), set \paramname{view} to 
}it.\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{What is the return value?}



\fieldheading{Usage}

\fieldtext{Used by \paramname{textview} to pass mouse hits to its children.}


\view{bpv,538271560,230,0,0}
______________________________________________________				


\paragraph{textview_LookCmd}

				

\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{textview_LookCmd }(}\fixedindent{

struct textview *\paramname{textview},

int \paramname{look});}


\fieldheading{Category}

Method



\fieldheading{Description}   

\fieldtext{What does it do?  What are the arguments?  Can arguments be NULL? 
Assumptions about paths or environment? etc. }


\fieldtext{The following comment was in the .ch file:

<no comment was found>

}

\fieldheading{Return Value}

\fieldtext{What does it return?}



\fieldheading{Usage}

\fieldtext{When would you use this?  When would you not use this?  When would 
you use something else instead of this?

}

\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}



\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}



\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}



\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}



\fieldheading{Example}

\fieldtext{Concrete example.

}\
\view{bpv,538271560,231,0,0}
______________________________________________________				


\paragraph{textview_LoseInputFocus}

				

\majorheading{Give up the input focus}

______________________________________________________


\fixedtext{void \bold{textview_LoseInputFocus }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Give up the input focus and call for an update.}



\fieldheading{Usage}

\fieldtext{A parent should notify a child \paramname{textview} that it has 
lost the input focus by calling this method.

}

\fieldheading{Side Effects}

\fieldtext{Sets \paramname{textview->hasInputFocus} to FALSE; the 
\paramname{textview} communicates a \paramname{WantUpdate}.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_ReceiveInputFocus}.  For a discussion of the 
input focus, see \paramname{view::LoseInputFocus} and Example 4 
(examples/ex4/example.doc).}

\view{bpv,538271560,232,0,0}
______________________________________________________				


\paragraph{textview_MoveBack}

				

\majorheading{Move the dot backward}

______________________________________________________


\fixedtext{long \bold{textview_MoveBack }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{pos},

long \paramname{n},

enum textview_MovementUnits \paramname{type},

long *\paramname{distMoved},

long *\paramname{linesAdded});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Moves the dot back from \italic{\paramname{pos}} \paramname{n} 
\italic{units.  The parameter \paramname{type} specifies the type of units, 
}either \italic{\paramname{textview_MoveByPixels}} or 
\italic{\paramname{textview_MoveByLines}}.  Sets \italic{\paramname{distMoved}} 
to the distance moved from the original position in terms of pixels and 
 \italic{\paramname{linesAdded}} to the number of any lines added.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{The position in the text that will be at the beginning of the line 
you land on after moving back the indicated distance.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_MoveForward}.}

\view{bpv,538271560,233,0,0}
______________________________________________________				


\paragraph{textview_MoveForward}

				

\majorheading{Move the dot forward}

______________________________________________________


\fixedtext{long \bold{textview_MoveForward }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{pos},

long \paramname{units},

enum textview_MovementUnits \paramname{type},

long *\paramname{distMoved},

long *\paramname{linesAdded});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Moves the dot forward from \italic{\paramname{pos}} \paramname{n} 
\italic{units.  The parameter \paramname{type} specifies the type of units, 
}either \italic{\paramname{textview_MoveByPixels}} or 
\italic{\paramname{textview_MoveByLines}}.  Sets \italic{\paramname{distMoved}} 
to the distance moved from the original position in terms of pixels and 
 \italic{\paramname{linesAdded}} to the number of any lines added.}


\fieldheading{Return Value}

\fieldtext{The position in the text that will be at the beginning of the line 
you land on after moving forward the indicated distance.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_MoveBack}.}

\view{bpv,538271560,234,0,0}
______________________________________________________				


\paragraph{textview_ObservedChanged}

				

\majorheading{Take appropriate action upon observing a change}

______________________________________________________


\fixedtext{void \bold{textview_ObservedChanged }(}\fixedindent{

struct textview *\paramname{textview},

struct observable *\paramname{changed},

long \paramname{value});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{On the one hand, if \paramname{changed} is equal to 
\paramname{textview}'s dataobject and \paramname{value} is 
\paramname{observable::OBJECTDESTROYED}, sets \paramname{textview}'s dataobject 
field to NULL; if value is not equal to 
\paramname{observable::OBJECTDESTROYED}, calls a \paramname{WantUpdate}.  On 
the other hand, if \paramname{changed} is a view reference and 
\paramname{value} is \paramname{observable::OBJECTDESTROYED},  unlinks the view 
reference from the view tree, deletes its entry in the dictionary, and 
destroys it.}


\fieldheading{See Also}

\fieldtext{\paramname{view::ObservedChanged}i (atk/basics/common/view.doc).}

\view{bpv,538271560,235,0,0}
______________________________________________________				


\paragraph{textview_Print}

				

\majorheading{Prints a text file}

______________________________________________________


\fixedtext{void \bold{textview_Print }(}\fixedindent{

struct textview *\paramname{textview},

FILE *\paramname{file},

char *\paramname{processor},

char *\paramname{finalFormat},

boolean \paramname{topLevel});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{If \paramname{processor} is "troff" and \paramname{finalFormat} is 
"PostScript," prints the \paramname{file}, which should be the text file 
associated with \paramname{textview}.  If \paramname{textview_Print} is being 
called from another \paramname{view::Print} invocation, the \paramname{topLevel} 
parameter should be one more than the caller's level parameter.


}
\fieldheading{Usage}

\fieldtext{Call if you want to print a textview.

}

\fieldheading{Error Conditions}

\fieldtext{If the class \paramname{texttroff} cannot be loaded, displays the 
message "Print aborted: could not load class 'texttroff'. "}



\fieldheading{Known Bugs}

\fieldtext{Should return an error if texttroff cannot be loaded.}



\fieldheading{See Also}

\fieldtext{\paramname{view::Print} (atk/basics/common/view.doc).}

\view{bpv,538271560,236,0,0}
______________________________________________________				


\paragraph{textview_ReceiveInputFocus}

				

\majorheading{Takes actions appropriate to receiving the input focus}

______________________________________________________


\fixedtext{void \bold{textview_ReceiveInputFocus }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Takes actions appropriate to having received the input focus; in 
particular, posts a keystate and a menulist and calls for an update.


}\fieldheading{Usage}

\fieldtext{A parent should notify a child \paramname{textview} that it has 
received the input focus by calling this method.}



\fieldheading{Side Effects}

\fieldtext{Sets \paramname{textview->hasInputFocus} to TRUE; the 
\paramname{textview} communicates a \paramname{WantUpdate}.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_LoseInputFocus}; For a discussion of the input 
focus, see \paramname{view::ReceiveInputFocus} and Example 4 
(examples/ex4/example.doc).}

\view{bpv,538271560,237,0,0}
______________________________________________________				


\paragraph{textview_SetBorder}

				

\majorheading{Sets the whitespace borders for text}

______________________________________________________


\fixedtext{void \bold{textview_SetBorder }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{xBorder},

long \paramname{yBorder});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Sets the left and right borders to  \paramname{xBorder} and the top 
and bottom borders to \paramname{yBorder}.  These borders are used when the 
text has an application layer.}



\fieldheading{Known Bugs}

\fieldtext{Needs to do some update for resetting the border.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_SetEmbeddedBorder}.     For a discussion of 
application layers, see view.doc (atk/basics/common/view.doc).}

\view{bpv,538271560,238,0,0}
______________________________________________________				


\paragraph{textview_SetDataObject}

				

\majorheading{Set the data object}

______________________________________________________


\fixedtext{void \bold{textview_SetDataObject }(}\fixedindent{

struct textview *\paramname{textview},

struct dataobject *\paramname{dataObject});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Associates \paramname{textview} with its \paramname{dataObject}, 
where \paramname{dataObject} should be an instance of the class 
\paramname{text}.}\fieldtext{

}

\fieldheading{Error Conditions}

\fieldtext{If the type of dataObject is not "text," prints the message 
"Incompatible dataobject associated with textview\\n" to standard error.}



\fieldheading{Side Effect}

\fieldtext{Adds \paramname{textview} to \paramname{dataObject}'s list of 
observers.}



\fieldheading{See Also}

\fieldtext{\paramname{view::SetDataObject} (atk/basics/common/view.doc).}

\view{bpv,538271560,239,0,0}
______________________________________________________				


\paragraph{textview_SetDefaultStyle}

				

\majorheading{Set the default style}

______________________________________________________


\fixedtext{void \bold{textview_SetDefaultStyle }(}\fixedindent{

struct textview *\paramname{textview},

struct style *\paramname{styleptr});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Sets \paramname{textview'}s default style to \paramname{styleptr}.


}
\fieldheading{Usage}

\fieldtext{When an instance of \paramname{textview} is initialized, the 
default style includes font family Andy, font size 12, justification left 
justified.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_GetDefaultStyle}.}

\view{bpv,538271560,240,0,0}
______________________________________________________				


\paragraph{textview_SetDotLength}

				

\majorheading{Set the length of the dot}

______________________________________________________


\fixedtext{void \bold{textview_SetDotLength }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{newLength});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Sets the length of \paramname{textview}'s dot to 
\paramname{newLength}.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_GetDotLength}.}

\view{bpv,538271560,241,0,0}
______________________________________________________				


\paragraph{textview_SetDotPosition}

				

\majorheading{Set the position of the dot}

______________________________________________________


\fixedtext{void \bold{textview_SetDotPosition }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{newPosition});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Set the position of \paramname{textview}'s dot to 
\paramname{newPosition}.


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_GetDotPosition}.}

\view{bpv,538271560,242,0,0}
______________________________________________________				


\paragraph{textview_SetEmbeddedBorder}

				

\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{textview_SetEmbeddedBorder }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{xBorder},

long \paramname{yBorder});}


\fieldheading{Category}

Method



\fieldheading{Description}   

\fieldtext{Sets the left and right embedded borders to  \paramname{xBorder} 
and the top and bottom embedded borders to \paramname{yBorder}.  These borders 
are used when the text has no application layer.}


\fieldheading{Known Bugs}

\fieldtext{Needs to do some update for resetting the border.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_SetBorder}.   For a discussion of application 
layers, see view.doc (atk/basics/common/view.doc).}

\view{bpv,538271560,243,0,0}
______________________________________________________				


\paragraph{textview_SetTopPosition}

				

\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{textview_SetTopPosition }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{newTopPosition});}


\fieldheading{Category}

Method



\fieldheading{Description}   

\fieldtext{What does it do?  What are the arguments?  Can arguments be NULL? 
Assumptions about paths or environment? etc. }


\fieldtext{The following comment was in the .ch file:

<no comment was found>

}

\fieldheading{Return Value}

\fieldtext{What does it return?}



\fieldheading{Usage}

\fieldtext{When would you use this?  When would you not use this?  When would 
you use something else instead of this?

}

\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}



\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}



\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}



\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}



\fieldheading{Example}

\fieldtext{Concrete example.

}




\view{bpv,538271560,244,0,0}
______________________________________________________				


\paragraph{textview_Update}

				

\majorheading{Updates those text lines that need to be redrawn}

______________________________________________________


\fixedtext{void \bold{textview_Update }(}\fixedindent{

struct textview *\paramname{textview});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Updates (i.e., redraws) those \paramname{textview} lines that need 
to be redrawn.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_FullUpdate}; \paramname{view::Update} 
(atk/basics/common/view.doc).}

\view{bpv,538271560,245,0,0}
______________________________________________________				


\paragraph{textview_ViewMove}

				

\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{textview_ViewMove }(}\fixedindent{

struct textview *\paramname{textview},

struct mark *\paramname{currentLine},

long \paramname{movement});}


\fieldheading{Category}

\fieldtext{Method}


\fieldheading{Description}   

\fieldtext{What does it do?  What are the arguments?  Can arguments be NULL? 
Assumptions about paths or environment? etc. }


\fieldtext{The following comment was in the .ch file:

<no comment was found>

}
\fieldheading{Return Value}

\fieldtext{What does it return?}


\fieldheading{Usage}

\fieldtext{When would you use this?  When would you not use this?  When would 
you use something else instead of this?

}
\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}


\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}


\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}


\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}


\fieldheading{Example}

\fieldtext{Concrete example.

}
\view{bpv,538271560,246,0,0}
______________________________________________________				


\paragraph{textview_Visible}

				

\majorheading{Position is visible}

______________________________________________________


\fixedtext{boolean \bold{textview_Visible }(}\fixedindent{

struct textview *\paramname{textview},

long \paramname{pos});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Tests whether \paramname{pos} is visible.}


\fieldheading{Return Value}

\fieldtext{TRUE if pos is visible; FALSE otherwise.}

\view{bpv,538271560,247,0,0}
______________________________________________________				


\paragraph{textview_WantNewSize}

				

\majorheading{Request a new size}

______________________________________________________


\fixedtext{void \bold{textview_WantNewSize }(}\fixedindent{

struct textview *\paramname{textview},

struct view *\paramname{requestor});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Provides a method for a view, \italic{\paramname{requestor}}, to 
request \paramname{textview} to begin a desired size negotiation.}


\fieldheading{Usage}

\fieldtext{A child view should request size negotiations from its parent by 
calling this method


}
\fieldheading{See Also}

\fieldtext{\paramname{textview_DesiredSize}}\fieldtext{; 
}\fieldtext{\paramname{view::WantNewSize} (atk/basics/common/view.doc).}

\view{bpv,538271560,248,0,0}
______________________________________________________				


\paragraph{textview_WantUpdate}

				

\majorheading{Request an update}

______________________________________________________


\fixedtext{void \bold{textview_WantUpdate }(}\fixedindent{

struct textview *\paramname{textview},

struct view *\paramname{requestor});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Requests an update for view \paramname{requestor} from 
\paramname{textview}.


}
\fieldheading{Usage}

\fieldtext{If a view to update its image, it should call 
\italic{\paramname{view::WantUpdate}} with both arguments set to itself.}


\fieldheading{See Also}

\fieldtext{\paramname{textview_Update}; for a discussion of update requests, 
see \paramname{view::WantUpdate} (atk/basics/common/view.doc); for a list}


\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,251,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.
\enddata{text,538442812}
