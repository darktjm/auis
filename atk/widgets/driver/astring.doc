\begindata{text,539141256}
\textdsversion{12}
\template{default}


\majorheading{AString - General String Package}



The AString type implements "worry-free" strings.  There is no need to 
worry about allocating or exceeding space.  The generic modification 
operator on an AString is replace--a substring of any length can be 
replaced with a string of any length.  Specializations of this operation 
include append, delete, and insert.  Because there is a conversion 
operator, AString values can be cast to (char *) and used wherever a normal 
C string can be used.  There are also operators for search and stream 
access.


AString values can contain NUL (\\0), but this is not recommended.


\section{Typical usage}


// declaration

	AString title, name;


// assignment and append

	title = "Duchess";

	title.Append(" of Kent");

	name = "Clara";

	name.Append(", ").Append(title);	\


			// name == "Clara, Duchess of Kent"


	title = "Moby Dick";

// search and comparison

	int i = name.Search("of");		// 15

	boolean foo = (title == "Moby Dick");	// TRUE


// I/O

	printf ("%s\\n", (char *)title);	\


			// prints "Moby Dick\\n"

			// the cast is necessary

	name.Sprintf("any%s %d u\\n", "thing", 4); \


			// prints "anything 4 u\\n"



\section{Constructors / Destructor}


\bold{AString()} \


\leftindent{Creates an empty AString value.}


\bold{AString(const char *s) \


AString(const AString &s) \


AString(const char s) }\


\leftindent{All three of these initialize the AString to have the value of 
s.}


\bold{~AString()}

\leftindent{Discards the string value.}


\section{Elemental operations}


\bold{operator  char *() const  }\


\leftindent{When an AString value appears in a context requiring a (char *) 
value, this conversion produces that value.  In many cases where the type 
is not apparent from the context, a cast is necessary to cause this 
conversion to take place.  \



It is an (undetected) error to modify the string value.  Especially wrong 
is to modify its length;   results are unpredictable, but almost certainly 
undesirable.


(The conversion to (char *) is trivial because the string is stored 
internally in the proper format.)}


\bold{const char *operator+ (int i) const}

\leftindent{If A is an AString value and i an integer, the value of A+i is 
the substring of A starting with its (i+1)th character.  In other 
words--using the operator char*() conversion--the value is \


	((char *)A)+3

}

\bold{char operator[] (int i) const }\


\leftindent{Returns the (i+1)th character of the string.  That is,  *(A+i).}


\bold{int Length() const} \


\leftindent{Returns the number of characters in the string.  This value is 
stored in the AString and is not computed by counting.}


\section{Value modification}


\bold{void Clear() }\


\leftindent{Resets the AString to be empty.}


\bold{AString &operator= (const char *s) }\


\bold{AString &operator= (const char s) }\


\bold{AString &operator= (const AString &s) }\


\leftindent{  Replaces the value of the AString with that of s.}


\bold{AString &Append(const char *s) }\


\bold{AString &Append(const char s) }\


\bold{AString &Append(const AString &s) }\


\bold{AString &operator<< (const char *s)

AString &operator<< (const AString &s)

AString &operator<< (const char s) \


AString &operator<< (const long i) \


AString &operator<< (const double d) }\


\leftindent{Appends the value of s to the end of the AString value.  The 
long i and double d methods call itoa and dtoa, respectively.}


\bold{AString &Insert(int i, char *s) }\


\bold{AString &Insert (int i, const char s) }\


\bold{AString &Insert(int i, const AString &s) }\


\leftindent{Inserts the value of s into the AString so the first character 
of the insertion is in the (i+1)th position.}


\bold{AString &Delete(int i, int len) }\


\leftindent{Deletes the len characters of the AString starting with the 
(i+1)th. }\



\bold{AString &Replace(int i, int len, const char *s)}

\bold{AString &Replace(int i, int len, const char s) }\


\bold{AString &Replace(int i, int len, const AString &s)}

\leftindent{Replaces the len characters of the AString starting at the 
(i+1)th position with the value of s. }\



\bold{AString &AppendN(const char *s, int slen) }\


\bold{AString &InsertN(int i, char *s, int slen) }\


\bold{AString &ReplaceN(int i, int len, const char *s, int slen)}

\leftindent{These functions are like the similarly named functions without 
the trailing N.  They use only the first slen characters of s.}




\section{Comparison and Search}


\bold{boolean operator==(const char *s) const }\


\bold{boolean operator!=(const char *s) const }\


\bold{boolean operator<(const char *s) const }\


\bold{boolean operator>(const char *s) const }\


\bold{boolean operator<=(const char *s) const }\


\bold{boolean operator>=(const char *s) const }\


\leftindent{Compare the AString value against s and return TRUE or FALSE.}


\bold{int Search(const char c, int pos = 0) const

int Search(const char *s, int pos = 0) const

int FoldedSearch(const char *s, int pos = 0) const}

\leftindent{Returns the number of characters in the AString prior to where 
c or s first appears.  The pos argument directs that the search begin with 
the (pos+1)th character, but the result value is still relative to the 
beginning of the AString.  If the target is not found, returns -1.  The 
"Folded" version treats upper and lower case letters as identical.

}
\bold{boolean FoldedEq(const char *s) const}

\bold{boolean FoldedEq(const AString &s) const}

\bold{boolean FoldedEqN(const char *s, int len) const }\


\leftindent{Compares the AString to s and returns TRUE iff they are the 
same when upper and lower case letters are treated as the same.  The N 
version checks only the first len characters of s and the AString.}


\bold{int RegSearch(const char *pat, int pos = 0, int *len = NULL) const}

Returns the number of characters in the AString prior to where pat first 
appears.  The pos argument directs that the search begin with the (pos+1)th 
character, but the result value is still relative to the beginning of the 
AString.  If the target is not found, returns -1.  If len is supplied, it 
is set to the length of the matched portion of the AString.   Patterns are 
those of the Andrew pattern matcher and offer the operators: \


	. 	matches any character

	x* 	matches 0 or more instances of x

	[xyz]		matches any character from the set

	[^xyz]	matches any character not in xyz

	\\x	treats x as a plain character



\section{Input / Output}


\bold{char *SubstrCpy(char *s, int pos, int len) const}

\leftindent{Copy \italic{to} s the substring of the AString starting at pos 
and extending for len characters.}


\bold{AString &Sprintf(const char *fmt, ...)}

\leftindent{Constructs the AString value by interpreting the format and 
subsequent values.  All ANSI/ISO C formats are supported--%s %c %d%i %o %u 
%x %X %e %E %f %g %G %n %p %%--together with all modifiers.}


\bold{FILE *VfileOpen(char *mode)

void VfileClose(FILE *f)}

\leftindent{An AString value may be treated as a source or sink for stdio 
file operations.  If *mode is 'w', the returned FILE * value can be written 
to with operations like fprintf().  If *mode is 'r', the returned FILE * 
can be read from with getc, fscanf, or another input function;  the value 
of the AString will supply the contents read from the file.


When the file I/O is completed, VFileClose must be called on the AString 
value.  If *mode was 'w', the value written to FILE * is now the value of 
the AString.  Once an AString value has been operated on with VFileOpen, it 
must not be further accessed or used until the corresponding call to 
VFileClose for the same AString.}


\bold{static const char *itoa (long i)

static const char *dtoa (double d)}

\leftindent{These two convenience functions convert, respectively, integer 
and floating values to strings, using formats %d and %g.  The values are 
stored in internal buffers which are reused the next time the function is 
called.}


\enddata{text,539141256}
