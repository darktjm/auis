\begindata{text,7122464}
\textdsversion{12}
\template{default}
\majorheading{AVarSet - General Object with Attributes}



An AVarSet object can have arbitrary attributes which can be set/reset by 
clients and stored in a data stream.  AVarSet is designed to be a base 
class for other classes, such as awidget, which require attributed objects.


Each AVarSet object manages a set of slots, some predefined by a derived 
class and others added arbitrarily at run time.  The collection is managed 
with the methods \bold{Baptize}, \bold{AddSlot}, \bold{RemoveSlot,} 
\bold{LocateSlot}, and \bold{EnumerateSlots}.  The values within the slots 
can be modified with the \bold{Set} and \bold{Get} methods.  An AVarSet can 
be initialized from a resource class stored in a file.  The methods to do 
this include those to \bold{SetResourceClass} and 
\bold{FetchInitialResources}.  The normal dataobject \bold{Read} and 
\bold{Write} methods are available, as are additional methods 
\bold{ParseLocalDataLine} and \bold{WriteLocalData} which can simplify the 
writing of code for derived objects.


In general, slot names are created with the ASlot_NAME macro described in 
aslot.doc:

	ASlot_NAME(x)	// declares slot_x

	ASlot_NAME(y)	// declares slot_y

The type for a parameter to hold a slot name is

	ASlot_NameParam



\section{Constructor / Destructor}


\bold{AVarSet()}

\leftindent{Creates an AVarset value.

}
\bold{~AVarSet()}

\leftindent{Discards an AVarsetValue.  This method should NOT be called. 
 Instead, the AVarSet should be dissociated by calling its \bold{Destroy}() 
method.  The destructor (when finally called by the \bold{Destroy} process) 
deletes all slots which have been added to the object with \bold{AddSlot}.}



\section{Change Notification}


\bold{AVarSet_DATACHANGED}

\leftindent{When any aspect of an AVarSet is modified, its observers should 
be notitifed of the change.  Call NotifyObservers passing 
AVarSet_DATACHANGED as teh second argument.  (Derived classes may use some 
other notification mechanism or codes.)}



\section{Managing the Collection of Slots}


\bold{virtual ASlot &Baptize(ASlot &v, ASlot_NameParam name=NULL})

\leftindent{Baptize is used by a derived class to inform the AVarSet as to 
what slots are part of the object itself.  v must be a reference to the 
slot.  The name, if any, is assigned to the slot (for Get/Set) and the slot 
is added to the list of local slots.  The return value is v so 
initialization assignments can be chained on to the Baptize call:

	AVS->Baptize(somelocalslot, slot_somename) = someinitialvalue;}

\bold{
virtual ASlot *AddSlot(ASlot_NameParam name, const char *typenm)}

\leftindent{Returns a pointer to the slot (local or added) having the given 
name.  If there is no such slot, it is created and given the specified name 
and type.  (The type name should not have its leading "ASlot".)  The slot 
is returned if it exists even if it does not have the specified type.}

\bold{
virtual void RemoveSlot(ASlot_NameParam name)}

\leftindent{If the named slot exists among the added slots, it is removed 
from the list and deleted from memory.}

\bold{
typedef boolean AVarSet_esfptr(AVarSet *vars, ASlot *slot, void *rock)

void EnumerateSlots(AVarSet_esfptr *f, void *rock)}

\leftindent{Function f is called for each slot (local and added) in the 
AVarSet.  However, if f returns FALSE, the enumeration ceases. }\




\section{Get and Set}


\bold{AVarSet &Set(ASlot_NameParam snm, ASlot *v)}

Sets the named slot to have the value of slot v.  If the types do not 
match, no assignment is made.  The AVarSet itself is returned so additional 
Set operations can be chained on.


\bold{AVarSet &Set(ASlot_NameParam snm, long v)

AVarSet &Set(ASlot_NameParam snm, double v)

AVarSet &Set(ASlot_NameParam snm, const char *v)

AVarSet &Set(ASlot_NameParam snm, void v)

AVarSet &Set(ASlot_NameParam snm, ATK *v)

AVarSet &Set(ASlot_NameParam snm, aaction *v)

AVarSet &Set(ASlot_NameParam snm, proctable *v)

AVarSet &Set(ASlot_NameParam snm, dataobject *v)

AVarSet &Set(ASlot_NameParam snm, figure *v)}

\leftindent{The named slot is checked to see that it is of the appropriate 
type, and, if so, the value is assigned to the slot.  The AVarSet itself is 
returned so additional Set operations can be chained on:

	A.Set(slot_x, 3L).Set(slot_y, 5L)

Note the use of `L' to resolve the ambiguity between long and double.}


\bold{ASlot *Get(ASlot_NameParam snm)}

\leftindent{Fetches the slot with the given name, looking in both the local 
and added slots.  If there is no such slot, returns NULL.  In general, it 
is easier to use one of the two-argument versions of Get.}


\bold{long Get(ASlot_NameParam snm, long def)

double Get(ASlot_NameParam snm, double def)

const char *Get(ASlot_NameParam snm, const char *def)

aaction *Get(ASlot_NameParam snm, aaction *def)}

\leftindent{These fetch, and possibly convert, the value in the slot to the 
indicated type.  Note that the type is implied by the default value, def. 
 If there is no slot of the given name, or if conversion fails, def is 
returned.}


\bold{ATK *GetATK(ASlot_NameParam snm, ATKregistryEntry *type=NULL)

dataobject *GetDataObj(ASlot_NameParam snm, ATKregistryEntry *type=NULL)

figure *GetFigure(ASlot_NameParam snm, ATKregistryEntry *type=NULL)}

\leftindent{These methods fetch the named slot and check to ensure that it 
contains a value of the ATK class implied by the function name.  If the 
type argument is specified, the fetched value must be a pointer to an 
object of that more restricted class.  If no appropriate value is found, 
the function returns NULL.}



\section{Resources}


The "resource class" of an AVarSet identifies the source of initialization 
for the object.  For an awidget, the resource file specifies the slot 
values appropriate for a plain, unmodified instance of the widget.


Resources can be initially set from a file found in one of the directories 
on the user's CLASSPATH, or a subdirectory named /widget/.  Resource files 
have the extension `wgt'.  Thus a resource file has a name like:


	CLASSPATH-element/\{,widgets/\}<ClassName>.wgt \



The class name is specified to AVarSet by passing an atom for that name to 
\bold{FetchInitialResources} (or by calling \bold{SetResourceClass}). 
 FetchInitialResources also inherits attribute values from parents in the 
view tree.


The Read() method will call FetchInitialResources() if it has not been 
called or the first line of a data stream is of the form \


	!Class:resourcelassname

If there is no leading "resourceclass"  line and SetResourceClass() has not 
been called, the name is taken from the class name of the object. If a 
FetchInitialResources for another class has been called and then the 
datastream gives another resourceclass name,  FetchInitialResources will be 
called again for the new name; any vars from the first 
FetchInitialResources will remain,  but can be overridden.


\bold{void SetResourceClass(const atom *name)

const atom *GetResourceClass() }\


\leftindent{These methods set and fetch the resource class name for the 
AVarSet.}


\bold{int FetchInitialResources(const atom *name=NULL)}

\leftindent{If 'name' is given, it is used to set the resource class name, 
otherwise, the existing name, if any, is used.  FetchInitialResources reads 
all resource files for the given class name and adds their resources to the 
Slots of this AVarSet.  If a resource already exists in the AVarSet, its 
value ios replaced if the types are the same.    The method returns the 
number of errors detected.  Eventually FetchInitialResources will also 
fetch resources from ancestors and the command line.}


\bold{int FetchResources(FILE *fp)}

\leftindent{Fetches resources from the given FILE.  This function is 
usually called by FetchInitialResources, but can be called to load 
resources fromarbitrary files.  The return value is the number of errors 
detected.}



\section{File Input / Output}


\bold{long Read(FILE *file, long id)

long Write(FILE *file, long id, int level)}

\leftindent{These methods are inherited from dataobject and are 
appropriately overridden.  Classes derived from AVarSet do not need to 
override these function because of the local data convention. 
 \bold{AVarSet::Write} calls \bold{WriteLocalData} at the appropriate time. 
 \bold{AVarSet::Read} finds each line of local data and calls 
\bold{ParseLocalDataLine} on it.  In general, local data should be avoided 
in favor of storing everything as attributes.}


\bold{virtual void WriteLocalData(FILE *file)}

\leftindent{A derived class should override this method and write lines for 
its private data.  No line should begin with '\\' and all lines should be 
printable ASCII and 78 or fewer bytes.}


\bold{virtual void *ParseLocalDataLine(char *line, void *state)} \


\leftindent{A derived class should override this method.  It will be called 
for each line written by WriteLocalData().  Initially 'state' will be NULL, 
but on subsequent calls it will have whatever value was  returned by the 
call for the previous line. When there are no more lines, the method will 
be called with NULL for the 'line' value.}




The file format for an AVarSet begins and ends with the standard 
\\begindata and \\enddata.  The first line may be of the form:

	!Class:resourcelassname

where resourceclassname.wgt or widgets/resourceclassname.wgt is one or more 
files in the user's home directory or in a directory named on the CLASSPATH.


Subsequent lines are in extended resource file format: \


	name colon value

The colon may be followed by a type name in parentheses, where the typename 
corresponds to a suffix for ASlot.   \



The last resource line may be followed by

	+local

which is followed in turn by data for the specific class derived from 
avarset.

\enddata{text,7122464}
