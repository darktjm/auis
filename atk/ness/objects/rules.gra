%{/* ********************************************************************** *\
 *         Copyright IBM Corporation 1988,1991 - All Rights Reserved      *
	Copyright Carnegie Mellon University 1992, 1993 - All Rights Reserved
\* ********************************************************************** */

/* ness.gra

	Grammar for the ness string expression language


Inode fields

the inode field of nesssyms is used for various values
here are some cases, with the args to nesssym_NSet{Info,INode}
	(Info is for integers;  INode is for ptr -- they share a field)
values in {} are corresponding flag values

ness.gra:
	INode($3, funcnode, NULL)
		for function that was forward referenced, ptr to funcnode
		{flag_function | flag_ness}
		{flag_function | flag_ness | flag_builtin}
		{flag_function | flag_ness | flag_forward}
		{flag_function | flag_ness | flag_xfunc}
		{flag_function | flag_ness | flag_xfunc | flag_forward}
	INode($1, vardefnode, vardefnode_Create(
		for constants, index into ness_Globals where value is
		{flag_const}
gen.c:
	INode(fname, funcnode, funcnode_Create(...))
		for function names, ptr to funcnode
		{flag_function | flag_ness}
	INode(syml, vardefnode, vardefnode_Create(prior, NULL));
		for globals, parms, and locals
		{flag_var | flag_globalvar, flag_var | flag_parmvar,
		    flag_var | flag_localvar}
call.c:
	INode(sym, builtindef, b)
		for builtin functions, ptr to table entry 
		{flag_function | flag_builtin, flag_var | flag_builtin}
	INode(sym, funcnode, fnode)
		funcval value: funcnode  {flag_function | flag_ness}
	INode(var->sym, callnode, callnode)
		for any method, classprocedure, _Get, or _Set: ptr to CallNode
		{flag_function | flag_classdefn}
	INode(func, callnode, call)
		for proctable entry: ptr to callnode
		{flag_function | flag_proctable}
	INode(var, funcnode, fnode)
		for function that may be in a library: funcnode
		{flag_function | flag_ness}
	INode(var, callnode, cnode)
		for call to undefined function: callnode
		{flag_function | flag_forward}
	INode(sym, callnode, NULL)
		call to unknown function
		{flag_function | flag_undef}
	INode(s, libnode, LibList)
		for library file name, ptr to libnode
		{flag_library}
nevent.c:
	INode(newobj, objnode, objnode_Create(...))
		for extend names: ptr to objnode
		{flag_xobj}
	INode(newevent, eventnode, allevents)
		for event names or tokens: ptr to eventnode
		{flag_event}
*/

#include <andrewos.h>	/* for bcopy */
#include <nessmark.H>
#include <ness.H>
#include <tlex.H>

	void
rules::ErrorGuts(int severity, const char *severityname, const char *msg)  {
	errorfromparse(severity, msg);
}

%}



%start script

/* precedences  (most of these precedences are dictated by the grammar rather than 
		these rules.  The rules are only used for  OR AND NOT ~)
*/

%left		OR
%left		AND
%left		NOT
%left <s>	'='  "/="
%nonassoc <s>	'<'  '>'  ">="  "<="
%left <s>	'+'  '-'
%left <s>	'*'  '/'  '%'
%left <s>	'~'
%left <s>	UNARYOP   /* used for precedence */


%token	<s>  setID
%token	<s>  setSTRINGCON  setINTCON  setREALCON  /* constants */

/* reserved words in declarations */
%token	<s>  MARKER  SUBSEQ  BOOLEAN  INTEGER  REAL  FUNCVAL  OBJECT  VOID
%token	<s>  FUNCTION  END  ON  EXTEND FORWARD EXPORT
%token	<s>  MOUSE  MENU  KEYS  EVENT
/* reserved words for statements */
%token	<s>  RETURN  WHILE  DO  IF  THEN  ELSE  ELIF  EXIT  GOTOELSE

/* reserved words for expressions*/
%token	<s>  tokTRUE  tokFALSE  tokNULL  AND  OR  NOT


%type <s>  parmList  nonEmptyParmList  parmDecl
%type <s>  stmtList  stmt  elsePart  declHead declIdList  funcend  eventstart  endtag

%type <i>  simpletype  relop  generaltype  visibletype exporttype

%type <varnode>	 var  constant  prim 
%type <exprnode> expr  midexpr  sumexpr  mulexpr  lowexpr  
%type <exprnode> args  argList  funcCall


%%  /* rules section */

			/* $$ is nothing, symbols are linked onto 
				*curComp->ness->AttrDest in genLinkGlobal */
script
	:
			{ /* this code creates the function for the initialization */
			   boolean junk;
			   curComp->ness->InitFunc  =  nesssym::NLocate("init*", 
					curComp->proto,
					curComp->scopes[curComp->scopex],
					&junk);
			   curComp->ness->InitFunc->flags =  flag_function | flag_ness;
			   curComp->ness->InitFunc->type = Tfunc;
			   curComp->ness->InitFunc->parent.ness = curComp->ness;
			   startfunc(curComp->ness->InitFunc, Tvoid);
			   genSaveFuncState();
			}
		attributes
			{ /* this code terminates the function for the initialization */
			   genRestoreFuncState(curComp->ness->InitFunc);
			   finishfunc(curComp->ness->InitFunc, NULL, NULL, 0);
			   genchkforward();	/* check that FORWARDs are satisfied */
			}
	;

/* An object is extended with a sequence of attribute declarations */
			/* $$ is nothing, symbols are linked onto *curComp->ness->AttrDest in genLinkGlobal */
attributes
	:	/* empty */	/* script may be empty */

	|	attributes		
		attrDecl
	;

exporttype
	:	/* empty */
		{ $$=FALSE; }
	|	EXPORT
		{$$ = TRUE; }
	;
		/* $$ is type as Txxx value */
simpletype
	:	MARKER
			{ $$ = Tstr; compileStmtStart(0); }
	|	SUBSEQ
			{ $$ = Tstr; compileStmtStart(0); }
	|	BOOLEAN
			{ $$ = Tbool; compileStmtStart(0); }
	|	INTEGER
			{ $$ = Tlong; compileStmtStart(0); }
	|	REAL
			{ $$ = Tdbl; compileStmtStart(0); }
	|	OBJECT
			{ $$ = Tptr; compileStmtStart(0); }
	|	generaltype
		FUNCVAL
			{ if ($1 == Tend) $1 = Tstr;  
			   $$ = Tfunc | ($1 << 4); 
			   compileStmtStart(0); }
	;

			/* $$ is a type value as Txxx */
generaltype
	:	/* EMPTY */
			{ $$ = Tend; }	/* default type is marker */
	|	VOID
			{ $$ = Tvoid; }
	|	simpletype
	;

			/* used for error recovery */
visibletype
	:	MARKER
			{ $$ = Tstr; }
	|	SUBSEQ
			{ $$ = Tstr; }
	|	BOOLEAN
			{ $$ = Tbool; }
	|	INTEGER
			{ $$ = Tlong; }
	|	REAL
			{ $$ = Tdbl; }
	|	OBJECT
			{ $$ = Tptr; }
	;

			/* $$ is $1, the token symbol */
eventstart
	:	MENU
	|	KEYS
	|	MOUSE
	|	EVENT
	;

			/* $$ is $1, the token symbol */
endtag
	:	FUNCTION
	|	EXTEND
	|	eventstart
	|	ON
	|	IF
	|	WHILE
	;

/* an attribute declaration is a variable declaration or a function definition */
			/* $$ is nothing, symbols are linked onto *curComp->ness->AttrDest */
attrDecl
	:	error
		FUNCTION
			{ if (isFuncStart(setID, 2)) {
				abortfunc(); 
				if (errorsynch(0)) parser_CLINEROK
				else parser_ERROR
			    } else parser_ERROR }
	|	error
		EXTEND
			{ if (isFuncStart(setSTRINGCON, 2)) {
				/* XXX ought to close existing EXTEND, if any */
				abortfunc(); 
				if (errorsynch(0)) parser_CLINEROK
				else parser_ERROR;
			    } else parser_ERROR; }
	|	error
		visibletype
			{ if (isFuncStart(0, 3)) {
				abortfunc(); 
				if (errorsynch(0)) parser_CLINEROK
				else parser_ERROR;
			    } else parser_ERROR; }
	|	error
		VOID
			{ class toksym *tok, *curtok;
			   int toknum;
			   /* if this is part of /return void/ we remain in error state;
				otherwise, it may be a global declaration
				which would signal the end of error state */
			   (curComp->tlex)->Repeat( -1);
			   toknum = tlex::LexFunc((curComp->tlex),(void*)&tok);
			   tlex::LexFunc((curComp->tlex),(void*)&curtok);
			   if (toknum == RETURN)
				parser_ERROR;
			   if (isFuncStart(0, 3)) {
				abortfunc();
 				if (errorsynch(0)) parser_CLINEROK
				else parser_ERROR;
			    } else parser_ERROR; }
	|	error
		ON
		eventstart
			{ /* XXX should we open an EXTEND, if none ??? */
			   /* we accept the ON only if it is the first item on its line */
			    if ((curComp->tlex)->RecentIndent( -1) < 999) {
				abortfunc(); 
				if (errorsynch(-1)) parser_CLINEROK
				else parser_ERROR;
			    } else parser_ERROR; }

	|	';'	/* allow extra semi-colons */

	|	declHead	/* global variable declaration */
		declIdList
			{ class nesssym *id, *nid;
			   $1->next = $2;
			   ProcessDeclList($1->type, $1, 
					flag_var | flag_globalvar);
			   for (id = $1; id != NULL; id = nid) {
				nid = id->next;	/* genLinkGlobal changes the link */
				genLinkGlobal(id);
				TGlobRef gr = makeGlobal();
				ness_Globals[gr].e.i.hdr = idleHdr;
			   	nesssym_NGetINode(id, vardefnode)->addr = gr;
			   }}

	|	declHead	/* global variable with initialization */
		":="
			{ ProcessDeclList($1->type, $1, 
				flag_var | flag_globalvar);
			   genLinkGlobal($1);
			   TGlobRef gr = makeGlobal();
			   ness_Globals[gr].e.i.hdr = idleHdr;
			   nesssym_NGetINode($1, vardefnode)->addr = gr;
			   $<varnode>$ = genvarnode($1);
			   compileStmtStart(-2);
			   genRestoreFuncState(curComp->ness->InitFunc);
			   predpush(FALSE, $<varnode>$->loc+$<varnode>$->len, 'X'); }
		expr
			{ predvalue(&$4->type);  predpop(); 
			   demandnodetype($4, (($<varnode>3)->sym)->type);
			   exprnode_Destroy($4);
			   genvarstore($<varnode>3); 
			   genSaveFuncState(); }

	|	generaltype
		FUNCTION
		setID		/* function definition */
			{ long len;
			   if (($3->flags & (flag_ness | flag_forward))
					== (flag_ness | flag_forward)) {
				/* this was previously declared FORWARD */
				$<s>$ = $3;
			   }
			   else if ($3->flags == (flag_function | flag_forward)) {
				/* we are defining a function that was forward referenced
					discard the pointer to the callnode
					(the object code still refers to it)  */
				$3->flags = flag_function | flag_ness;
				nesssym_NSetINode($3, funcnode, NULL);
				$<s>$ = $3;
			   }
			   else $<s>$ = uniqueinscope($3, flag_function | flag_ness, 0);

			   $<s>$->type = Tfunc;
			   if (curComp->ness->CurrentObject == NULL) 
				$<s>$->parent.ness = curComp->ness;
			   else {
				$<s>$->parent.nesssym = curComp->ness->CurrentObject;
				$<s>$->flags |= flag_xfunc;
			   }
			   compileStmtStart(-1);
			   predpush(curComp->predcond, 
				(curComp->tlex)->RecentPosition( -2, &len),
				'L');
			   startfunc($<s>$, $1); 
			}		/* $<s>4, symbol for the function name */
		'('
		parmList		/* $6, parmlist */
			{ struct funcnode *func = 
				nesssym_NGetINode($<s>4, funcnode);
			  if (func->parmlist == NULL)
				func->parmlist = $6; }	/* $7 is nothing */
		')'
		exporttype /* $9 */
		funcend						/* $10 */
			{  predpop(); finishfunc($<s>4, $<s>6, $10, $9); }

	|	EXTEND
		setSTRINGCON
			{ long len;
			   compileStmtStart(-1);
			   predpush(curComp->predcond, 
				(curComp->tlex)->RecentPosition( -1, &len),
				'E');
			   $<s>$ = neventStartExtend(curComp->ness->CurrentObject, $2);
			   curComp->ness->saveAttrDest = curComp->ness->AttrDest;
			   curComp->ness->AttrDest = &(nesssym_NGetINode($<s>$, objnode)->attrs);
			   curComp->ness->CurrentObject = $<s>$;
			   curComp->ness->CurrentObject->parent.ness = curComp->ness;  }
		attributes
		END
		endtag	/* EXTEND */
			{ genCheckEndtag($6, EXTEND);
			   neventFinishExtend($<s>3);  predpop();
			   curComp->ness->AttrDest = curComp->ness->saveAttrDest;
			   curComp->ness->CurrentObject = NULL; }

	|	ON
		eventstart
		setSTRINGCON 
			{ long len;
			   compileStmtStart(-2);
			   predpush(curComp->predcond, 
				(curComp->tlex)->RecentPosition( -1, &len), 
				'V');
			   $<s>$ = neventStartEvent(curComp->ness->CurrentObject, $2, $3); }	/* $4 */
		stmtList
		END
		endtag	/* eventstart or ON */
			{ genCheckEndtag($7, ON);
			   $<s>4 = neventFinishEvent($<s>4, $5, $7);   predpop();
			   $<s>4->parent.nesssym = curComp->ness->CurrentObject; }
	;

			/* $$ is a reversed list of the parameter symbols */
parmList
	:	/* empty */	/* no parameters */
			{ $$ = NULL; }

	|	nonEmptyParmList
	;

			/* $$ is a reversed list of the parameter symbols */
nonEmptyParmList
	:	parmDecl
			{ if ($$->next) 
			   ReportError(":differs from the 'forward' declaration", -1); }

	|	nonEmptyParmList
		','
		parmDecl
			{ $$ = $3;  
			   if ($$->next && $$->next != $1)
			   	ReportError(":unlike the 'forward' declaration", -1);
			   $$->next = $1; }
	;

parmDecl
	:	generaltype
		setID	
			{ if ($1 == Tend) $1 = Tstr;  $$ = genParmDecl($2, $1); }
	;


			/* $$ is list of declared local vars  or -1*/
		
funcend
	:	stmtList
		END
		endtag	/* FUNCTION */
			{ genCheckEndtag($3, FUNCTION);  $$ = $1; }
	|	FORWARD  
			{ $$ = (class nesssym *)(-1); }
	;


/* A <stmtList> is a list of statements.
	They are executed in succession.  The list may include declarations. 
*/
			/* $$ is the list of defined local vars. */
stmtList
	:	/* empty */
			{ $$ = NULL; }

	|	stmtList
			{ compileStmtStart(0);
			   $<s>$ = $1; }
		stmt
			{ $$ = appendlists($<s>2, $3); }
	;

			/* $$ is the list of defined local vars as nesssym's*/
stmt
	:	';'	/* extra semicolon */
			{ $$ = NULL; }

	|	var		/* assignment */
		":="
			{  $<varnode>$ = varIsStorable($1);
			   predpush(FALSE, $<varnode>$->loc+$<varnode>$->len, 'X'); }
		expr
			{ predvalue(&$4->type);  predpop(); 
			   demandnodetype($4, $<varnode>3->sym->type);
			   exprnode_Destroy($4);
			   genvarstore($<varnode>3);  $$ = NULL; }

	|	var		/* append */
		"~:="
			{ $<varnode>$ = varIsStorable($1); 
			   demandsymboltype($1->sym, Tstr);
			   predpush(curComp->predcond, $1->loc, 'X');	/* save loc for runtime error */
			   genvarref($1);
			   predpop(); }
		expr
			{ demandnodetype($4, Tstr);
			   if (curComp->ness->accesslevel >= ness_codeYellow)
			 	genop('A');	/* APPEND */
			   else {
				long loc, len;
				loc = $<varnode>3->loc + $<varnode>3->len;
				len = $4->loc - loc;
				SaveError(":Text append may modify a file", loc, len);
				genop('y');	/* pop, leave unchanged original */
			   }
			   exprnode_Destroy($4);
			   genvarstore($<varnode>3);  
			   $$ = NULL; }

	|	declHead	/* declaration */
		declIdList
			{ $$ = $1; $$->next = $2; 
			   ProcessDeclList($$->type, $$, 
					flag_var | flag_localvar);  }

	|	declHead	/* initialized declaration */
		":="
			{ $<varnode>$ = genvarnode($1);
			   ProcessDeclList($1->type, $<varnode>$->sym, 
					flag_var | flag_localvar); 
			   varIsStorable($<varnode>$);
			   predpush(FALSE, $<varnode>$->loc+$<varnode>$->len, 'X'); }
		expr
			{ predvalue(&$4->type);  predpop(); 
			   demandnodetype($4, $<varnode>3->sym->type);
			   exprnode_Destroy($4);
			   $$ = $<varnode>3->sym;  /* access before destroy varnode */
			   genvarstore($<varnode>3); }

	|	funcCall
			{ if ($1->type != Tvoid)
				genop('y');  /* POP - discardvalue  */
			   exprnode_Destroy($1);
			   $$ = NULL; }

	|	RETURN	/* return from function */
			{ long loc, len;  
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   predpush(FALSE, loc + len, 'X'); }
		expr
			{ predvalue(&($3->type));  predpop(); 
			   genreturn($3); 
			   exprnode_Destroy($3);
			   $$ = NULL; }

	|	RETURN	/* return with no value */
		VOID
			{ genreturn(NULL); $$ = NULL; }

	|	EXIT	/* return with no value */
		FUNCTION
			{ genreturn(NULL); $$ = NULL; }


	|	RETURN	/* return with no value */
		';'
			{ genreturn(NULL); $$ = NULL; }

	|	WHILE
			{ long loc, len;  
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $<predstatenode>$ = predpush(FALSE, loc + len, 'W'); }
		expr
			{ predbranch($3);  predfixdropthru(); 
			   exprnode_Destroy($3);
			   $<predstatenode>$ = $<predstatenode>2; }
		DO
		stmtList
		END
		endtag	/* WHILE */
			{ genCheckEndtag($8, WHILE);
			   genbranch('g', $<predstatenode>4->objloc);
			   predfixtarget();  predpop();
			   $$ = $6; }

	|	EXIT
		WHILE
			{ predexit('W');  $$ = NULL; }

	|	IF
			{ long loc, len;  
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   predpush(FALSE, loc + len, 'I'); }
		expr
		THEN
			{ predbranch($3);  predfixdropthru(); 
			   exprnode_Destroy($3); }
		stmtList
		elsePart
		END
		endtag	/* IF */
			{ genCheckEndtag($9, IF);
			   predpop();  $$ = appendlists($6, $7); }
	;

			/* $$ is a nesssym for the defined variable */
declHead	:
		simpletype
		setID
			{ $$ = uniqueinscope($2, flag_var, 0); 
			   $$->type = $1; }
	;

			/* $$ is the list of defined vars as nesssym's */
declIdList
	:	/* empty */
			{ $$ =NULL; }
	|	declIdList
		','
		setID
			{ $$ = appendlists($1, uniqueinscope($3, flag_var, 0)); }
	;


			/* $$ is the list of defined local vars as nesssym's */
elsePart 
	:	/* empty */
			{ predfixtarget();   $$ = NULL; }

	|	ELSE
			{ $<i>$ = genbranch('g', 0);  predfixtarget(); }
		stmtList
			{ fixbranch($<i>2);  $$ = $3; }

	|	ELIF
			{ long loc, len;  int fixloc = genbranch('g', 0);
			   predfixtarget();
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $<predstatenode>$ = predpush(FALSE, loc + len, 'I'); 
			   $<predstatenode>$->fixuploc = fixloc; }
		expr
		THEN
			{ predbranch($3);  predfixdropthru(); 
			   exprnode_Destroy($3); }
		stmtList
		elsePart
			{ fixbranch($<predstatenode>2->fixuploc);
			   predpop();  $$ = appendlists($6, $7); }
	;


			/* $$ is an integer index into TopTbl/FopTbl */
relop
	:	'='
			{ $$ = predEQ; }
	|	'<'
			{ $$ = predLT; }
	|	'>'
			{ $$ = predGT; }
	|	"/="
			{ $$ = predNE; }
	|	"<="
			{ $$ = predLE; }
	|	">="
			{ $$ = predGE; }
	;

		/* this is a syntactic class just for the error rules */
/* afterError
 *	:	','  |  ')'  |  END  |  ELIF  |  ELSE  ;
 */

/* * * * * * * * */
/* Expressions */
/* * * * * * * * */
			/* $$ is an exprnode whose type field has type as Txxx */
expr
	:	midexpr

	|	NOT
			{ $<i>$ = (curComp->tlex)->RecentPosition( 0, 0);
			   curComp->predcond = ! curComp->predcond; }
		expr
			{ predbranch($3);  curComp->predcond = ! curComp->predcond;  
			   $$ = $3;  $$->type = Tbra;
			   $$->len += $$->loc - $<i>2;
			   $$->loc = $<i>2; }

	|	expr
		OR
			{ long loc, len;
			   predbranch($1); preddropthru(predOR);
			   if (curComp->predcond == FALSE) predfixtarget(); 
			   else predfixdropthru();
			   $<exprnode>$ = $1;  
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   predpush(curComp->predcond, loc + len, 'X'); }
		expr
			{ predbranch($4);  
			   predfixdropthru();  predpop();
			  exprnode_Combine($$, $<exprnode>3, $4, Tbra); }

	|	expr
		AND
			{ predbranch($1); preddropthru(predAND);
			   if (curComp->predcond == TRUE) predfixtarget(); 
			   $<exprnode>$ = $1; }
		expr
			{ predbranch($4);
			   exprnode_Combine($$, $<exprnode>3, $4, Tbra); }
	;


			/* $$ is an exprnode whose type field has type as Txxx */
midexpr	:
		sumexpr

	|	sumexpr
		relop
		sumexpr
			{ gencomp($1, $3, $2);
			   predtarget ($2);
			   exprnode_Combine($$, $1, $3, Tbra); }
	;

			/* $$ is an exprnode whose type field has type as Txxx */
sumexpr	:
		mulexpr

	|	sumexpr '+'  mulexpr
				{ $$ = genarith('+', $1, $3); }

	|	sumexpr  '-'  mulexpr
				{ $$ = genarith('-', $1, $3); }
	;

			/* $$ is an exprnode whose type field has type as Txxx */
mulexpr	:
		lowexpr

	|	mulexpr  '*'  lowexpr
				{ $$ = genarith('*', $1, $3); }

	|	mulexpr  '/'  lowexpr
				{ $$ = genarith('/', $1, $3); }

	|	mulexpr  '%'  lowexpr
				{ $$ = genarith('%', $1, $3); }
	;

			/* $$ is an exprnode whose type field has type as Txxx */
lowexpr
	:	prim
			{ $$ = exprnode_Create($1->sym->type, NULL, FALSE, 
						$1->loc, $1->len);
			   /* save loc for runtime error */
			   predpush(curComp->predcond, $1->loc, 'X');	
			   if ($1->sym->flags & flag_const)
				genconstref($1->sym);
			   else
				$$->type = genvarref($1);
			   predpop();
			   varnode_Destroy($1); }

	|  	'-'		%prec UNARYOP
			{ $<i>$ = (curComp->tlex)->RecentPosition( 0, 0); }
		lowexpr
			{ if ($3->type == Tdbl) {genop('H'); genop('_');}
			   else {demandnodetype($3, Tlong);  genop('_');}
			   $$ = $3;   $$->len += $$->loc - $<i>2;
			   $$->loc = $<i>2; }

	|	'+'		%prec UNARYOP
			{ $<i>$ = (curComp->tlex)->RecentPosition( 0, 0); }
		lowexpr
			{ if ($3->type != Tdbl)
				demandnodetype($3, Tlong);
			   $$ = $3;  $$->len += $$->loc - $<i>2;
			   $$->loc = $<i>2; }

	|	funcCall
			{ if ($1->type == Tvoid) {
				genop('0');
				$1->type = Tlong;
			   }
			   $$ = $1; }

	|	tokTRUE
			{ long loc, len;
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $$ = exprnode_Create(Tbool, NULL, FALSE, loc, len);
			   genop('1'); }

	|	tokFALSE
			{ long loc, len;
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $$ = exprnode_Create(Tbool, NULL, FALSE, loc, len);
			   genop('9'); }

	|	tokNULL
			{ long loc, len;
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $$ = exprnode_Create(Tptr, NULL, FALSE, loc, len);
			   genop('^'); }

	|	lowexpr
		'~'
			{ demandnodetype($1, Tstr);
			   if ( ! $1->IsCat) {
				genop('q');	/* NEWBASE */
				genop('z');	/* SWAP */
				genop('r');	/* REPLACE */
			   }
			   $<exprnode>$ = $1; }
		lowexpr
			{ demandnodetype($4, Tstr);
			   genop('A');	/* append */
			   exprnode_Combine($$, $<exprnode>3, $4, Tstr);
			   $$->IsCat = TRUE; }

	|	'('
			{ long loc, len;
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $<varnode>$ = varnode_Create(loc, 0, NULL);
			   predpush(curComp->predcond, loc + len, 'X'); }
		expr
		')'
			{ long loc, len;
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   predfixdropthru();  predpop();
			   $3->len = loc+len - $<varnode>2->loc;
			   $3->loc = $<varnode>2->loc;  $$ = $3;
			   varnode_Destroy($<varnode>2); }
	;

/* a primitive denotes a value */
			/* $$ is a varnode for the value */
prim
	:	var
			{ $$ = $1; }

	|	constant
			{ $$ = $1; }
	;

			/* $$ is an exprnode with type having type of returned value */
funcCall
	:	var	/* must be a function.   */
		'('
			{ $<varnode>$ = varIsFunction($1);
			   predpush(curComp->predcond, $<varnode>$->loc, 'A'); }
		args
		')'
			{  $$ = callFunc($<varnode>3, $4);
			   predpop(); }
	;

			/* $$ is a reversed list of the types of args in exprnodes */
args
	:	argList
			{ $$ = $1; }

	|	/* EMPTY */	/* no arguments */
			{ $$ = NULL; }
	;

/* <argList> gives the argument expressions in a function call */
			/* $$ is a reversed list of exprnodes */
argList
	:	
			{ long loc, len;  
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   predpush(FALSE, loc + len, 'A'); }
		expr
			{ predvalue(&$2->type);  predpop();
			   $$ = $2; }

	|	argList
		','
			{ long loc, len;  
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   predpush(FALSE, loc + len, 'A'); }
		expr
			{ predvalue(&$4->type);  predpop();
			   $$ = $4;  $4->next = $1; }
	;


		/* $$ is a varnode pointing at the symbol */
var
	:	setID		/* name.  may be a function or a var
				and will be so marked at point of declaration */
			{ $$ = genvarnode($1); }
	;	

		/* $$ is a varnode */
constant
	:	setSTRINGCON
			{ /* there are 4 cases:  EmptyStringToken, short string,
				styled short string, and long string.  
				The EmptyStringToken has name '"'.
				A short string has a name beginning with " and
				 continuing with the \ reduced value of the string.  
				A styled short string  has the name ~ddd and
				a long string has a name /ddd, where
				ddd is an integer.  */
			   long loc, len;
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   if ( ! ($1->flags & flag_const)) 
				/* need to allocate new const */
				nesssym_NSetINode($1, vardefnode,
					vardefnode_Create(
					  makeStyledConst(curComp->ness, /*the text*/
						$1->loc, 
						$1->len,
						(*($1)->NGetName() == '"'
						||*($1)->NGetName() == '~')
					  ), NULL
					));
			   $1->type = Tstr;  $1->flags = flag_const;
			   $$ = varnode_Create(loc, len, $1); }

	|	setINTCON			   	
			{ long loc, len;
			   if ( ! ($1->flags & flag_const)) {
				/* need to allocate new const */
				TGlobRef g = makeGlobal();
				struct longstkelt *l;
				l = &ness_Globals[g].e.l;
				l->hdr = longHdr;
				l->v = nesssym_NGetInfo($1, long);
				nesssym_NSetINode($1, vardefnode, 
					vardefnode_Create(g, NULL));
				$1->type = Tlong;  $1->flags = flag_const;
			   }
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $$ = varnode_Create(loc, len, $1); }
	|	setREALCON		   	
			{ long loc, len;
			   if ( ! ($1->flags & flag_const)) {
				/* need to allocate new const */
				double *dp;
				TGlobRef g = makeGlobal();
				struct dblstkelt *d;
				d = &ness_Globals[g].e.d;
				d->hdr = dblHdr;
				dp = nesssym_NGetInfo($1, double *);
				d->v = *dp;
				nesssym_NSetINode($1, vardefnode, 
					vardefnode_Create(g, NULL));
				$1->type = Tdbl;  $1->flags = flag_const;
			   }
			   loc = (curComp->tlex)->RecentPosition( 0, &len);
			   $$ = varnode_Create(loc, len, $1); }
	;



%%  /* C routines follow */


