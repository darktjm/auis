-- ness.tlx
--	Token descriptions for Ness

-- ******************************************************
--	Copyright 1992,1993 Carnegie Mellon University.  All Rights Reserved.
-- ******************************************************


tokenclass -errorhandler-
{
	(CURCOMP->parser)->Error( parser_SERIOUS, parm->msg);
}

-- whitespace:  control characters, space, DEL, and \200+ controls
--
tokenclass -none-
	recognizer	ScanWhitespace
	set		[\000-\040\177-\237]
	charset 	continueset [\000-\040\177-\237]

-- comments:   -- ... \n
--
tokenclass -none-
	recognizer	ScanComment
	seq		"--"
	char		*endseq		"\n"

-- pragmats:  --$ ... \n
--
tokenclass -none-
	recognizer	ScanComment
	seq		"--$"
	char 		*endseq		"\n"
{
	long p = (tlex)->CurrPos();	/* pos after newline */
	(tlex)->BackUp( p - (tlex)->GetTokPos() - 3);
	(tlex)->StartToken();			/* start after --$ */
	while (p > (tlex)->CurrPos()) 
		(tlex)->Advance();		/* copy comment to TokenText */
	(tlex)->EndToken();
	parsepragmat(CURCOMP->ness, (tlex)->GetTokenText());
	return tlex_IGNORE;
}

-- mapping:	[ and {  map to (
--		] and }  map to )
--
--tokenclass '('
--	set	[{\[]
--tokenclass ')'
--	set	[}\]]

-- id:  [a-zA-Z_] [a-zA-Z0-9_]*
--	also catch reserved words here
--
tokenclass setID
	set		[a-zA-Z_]
	recognizer	ScanID
	charset 	continueset  [a-zA-Z0-9_]
{
	class toksym *s;  /* the value will be a nesssym via CC->proto */
	char *cx;
	boolean isNew;
	struct compilation *CC = CURCOMP;

	/* fold case */
	for (cx = (tlex)->GetTokenText(); *cx; cx++)
		if (isascii(*cx) && isupper(*cx))
			*cx = tolower(*cx);

	s = toksym::TLocate((tlex)->GetTokenText(), CC->proto, 
		CC->scopes[CC->scopex], &isNew);
	if (isNew) {
		s->toknum = (tlex)->GetTokenNumber();
		SETPOS(s);
	}
	(tlex)->SetTokenNumber( s->toknum);  /* maybe it's a res'v'd word */
	(tlex)->SetTokenValue( s);
	return tlex_ACCEPT;
}

-- numbers:	decimal: [1-9] [0-9]*
--		hex: 0 x [0-9a-f]*
--		octal: 0 [0-7]*
--		real: ((.[0-9]+)|([0-9]+.[0-9]*))((e|E)(+|-)?[0-9]+)?
--		quoted char: 'x' (with \ escapes)
--		the syntax is coded in parser_ParseNumber
--		the handler may convert the tokennumber to setREALCON
--
tokenclass setINTCON
	set	[0-9'.]
	recognizer	ScanNumber
	tokennumber	realtok     setREALCON
{
	class toksym *t;	/* due to proto, the value will be a nesssym */
	boolean isNew;
	if ( ! parm->IsInt)
		(tlex)->SetTokenNumber( parm->realtok);
	t = toksym::TLocate((tlex)->GetTokenText(), CURCOMP->proto,
		CURCOMP->ness->constScope, &isNew);
	if (isNew) {
		if ( ! parm->IsInt) {
			/* real value */
			t->info.realval = (double *)malloc(sizeof(double));
			*(t->info.realval) = parm->realval;
		}
		else {
			/* integer value   (or error) */
			t->info.intval = parm->intval;
		}
		t->toknum = (tlex)->GetTokenNumber();
		SETPOS(t);
	}
	(tlex)->SetTokenValue( t);
	return tlex_ACCEPT;
}

-- string	" ... "   escape is \
--
-- the four cases of  setSTRINGCON  token values are distinguished by 
-- the first character of the name field:
--	"	if no character follows in name, this is an empty string
--	"	if characters follow in name, the \ reduced version of the 
--			string follows in name
--	~	a short string with styles
--	/	long string.  
-- For ~ and /, the name contains only a sequence number.
-- Initially CurrPos is just after closing "
-- The loc/len values in the nesssym include the contents, not the delimiters.
--	The TokPos, TokEnd values include the delimiters.
--
tokenclass setSTRINGCON
	seq		"\""
	recognizer	ScanString
	char		*endseq		"\""
	char		*escapechar	"\\"
	char		*badchar 	"\n"
{
	boolean styled;
	long loc, loclast;
	class text *text;
	class toksym *t;
	boolean isNew;

	loc = (tlex)->GetTokPos() + 1;		/* just after " */
	loclast = (tlex)->GetTokEnd() - 1;	/* just before " */
	text = (class text *)(CURCOMP->ness);

	if (loclast - loc < 0) {
		(tlex)->SetTokenValue( EmptyStringToken);
		return tlex_ACCEPT;
	}

	/* test to see if text is styled */
	if (textClass == NULL)
		textClass = ATK::LoadClass("text");
	if ( ! (text)->IsType( textClass))
		styled = FALSE;
	else {
		class environment *env;
		env = (class environment *)(text->rootEnvironment)->GetInnerMost( loc);
		while (env != NULL && (env->type != environment_Style 
				|| env->data.style == NULL))
			env = (class environment *)(env)->GetParent();
		styled = ( env != NULL
			||  (text->rootEnvironment)->GetNextChange( 
				loc) < loclast - loc + 1);
			/* XXX need to test styling the last character */
	}

	if (styled) {
		/* short styled string */
		char buf[50];
		sprintf(buf, "~%ld", GenNum++);
		t = toksym::TLocate(buf, CURCOMP->proto, 
			CURCOMP->ness->constScope, &isNew);
		t->info.str = NULL;
		t->loc = loc;
		t->len = loclast - loc + 1;
	}
	else {
		char *sx, *dx;
		int elen;
	
		/* put characters (including initial ") into token buffer */
		(tlex)->BackUp( (tlex)->CurrPos() - loc +1);
		(tlex)->StartToken();
		while ((tlex)->CurrPos() <= loclast)
			(tlex)->Advance();
		(tlex)->NextChar();  /* skip closing " */
		(tlex)->EndToken();

		/* backslash reduce the token text */
		sx = (tlex)->GetTokenText();
		dx = sx;
		while (*sx) {
			if (*sx != '\\')
				*dx++ = *sx++;
			else {
				*dx++ = parser::TransEscape(sx+1, &elen);
				if (elen == 0) dx--;
				sx += elen+1;
			}
		}
		*dx = '\0';

		t = toksym::TLocate((tlex)->GetTokenText(), CURCOMP->proto, 
			CURCOMP->ness->constScope, &isNew);
		if (isNew) {
			t->loc = loc;
			t->len = loclast - loc + 1;
		}
	}
	t->toknum = (tlex)->GetTokenNumber();
	(tlex)->SetTokenValue( t);
	return tlex_ACCEPT;
}

-- long string:   \n//\n ... \n\\\\	 no escape
--
--	the string may be of any length and contain objects
--	the internals are not processed for backslashes
--	there is no way for the enclosed text to contain a line
--		beginning with two backslashes
--	none of the three newlines in the delimiters is included 
--		in the string value
--	the newlines are not processed by tlex, so initially
--		the current character is the newline right after //
--	symbol string in token value is a dummy
--		of form  /ddd, where ddd is a number
--	The nesssym loc/len values include the contents, not the delimiters.
--		The TokPos, TokEnd values include // and \\.
--	at end, the next character is left as the one after the
--		second backslash
--
tokenclass setSTRINGCON
seq	"//"
{
	int c;
	static const char delim[4] = "\n\\\\";
	const char *dx;
	class toksym *t;	/* is really a nesssym */	
	long startloc;

	/* check for newlines around // */
	(tlex)->BackUp( 3);
	if ((tlex)->CurrChar() != '\n') {
		/* missing leading newline: fail */
		(tlex)->Error( "missing newline before //");
		(tlex)->BackUp( -3);
		return tlex_IGNORE;
	}
	(tlex)->NextChar();
	(tlex)->StartToken();		/* start at first / */
	(tlex)->NextChar();
	(tlex)->NextChar();
	if ((tlex)->CurrChar() != '\n') 
		/* missing closing newline; let it get by */
		(CURCOMP->parser)->Error( parser_WARNING,
			"missing newline after //");
	else (tlex)->NextChar();
	/* now we know about newlines and CurrChar is first char of string */
	startloc = (tlex)->CurrPos();

	dx = delim;
	c = (tlex)->CurrChar();
	while (*dx && c != EOF) {
		if (*dx == c)
			dx++, c = (tlex)->NextChar();
		else if (dx == delim)
			c = (tlex)->NextChar();
		else dx = delim;
	}
	if (c == EOF) {
		(tlex)->Error( "unterminated string starting with //");
		return tlex_IGNORE;			
	}
	/* now we are at the character following the \\ */
	(tlex)->EndToken();

	if ((tlex)->GetTokEnd()-(tlex)->GetTokPos() < 1)
		t = EmptyStringToken;
	else {
		char buf[15];
		boolean isNew;
		sprintf(buf, "/%ld", GenNum++);
		t = toksym::TLocate(buf, CURCOMP->proto, 
			CURCOMP->scopes[CURCOMP->scopex], &isNew);
		t->info.str = NULL;
		t->toknum = (tlex)->GetTokenNumber();
		t->loc = startloc;
		t->len = (tlex)->CurrPos() - startloc - 3;
	}
	(tlex)->SetTokenValue( t);
	return tlex_ACCEPT;
}
