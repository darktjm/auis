%{
/* ********************************************************************** *\
 *         Copyright IBM Corporation 1988,1991 - All Rights Reserved      *
 *        For full copyright information see:'andrew/doc/COPYRITE'        *
\* ********************************************************************** */
#include <andrewos.h>
#include <ctype.h>
#include <rofftext.H>
#include "rofftext.h"
#include <roffutil.h>

#define DATA(p) ((struct evalstrdata *)((p)->GetRock()))


	void
num::ErrorGuts(int severity, const char *severityname, const char *msg)
{
	struct evalstrdata *data = DATA(this);
	if (data->rt->PrintWarnings) {
		fprintf(stderr,
			"rofftext: number error, %s line %d: %s\n",
			data->rt->Input->t->filename, 
			data->rt->Input->t->LineNumber, 
			msg);
	}
	if (severity & parser_FREEMSG) 
		free((char *)msg);
}


	static void
releasedbl(struct parser *p, double *d)
{
	struct evalstrdata *data = DATA(p);
	if (d == &data->dummydbl) 
		return;
	*d = (double)data->nextdbl;
	data ->nextdbl = d - data->dbls;
}

%}

%start list

%union {
    double *dval;
    enum scale_type sval;
}


%token <dval> CONST
%token <sval> SCALE

%type <dval> expr
%type <sval> tscale

%left  '|'  '&'  '+'  '-'  '*'  '/'  '%'  '>'  '<'  '='
%left  UMINUS /* supplies precedence for unary minus */
%right  SCALE

%% /* beginning of rules */

list	:	/* empty */
	|	list stat
	|	list error
			{	parser_CLINEROK;  }
	;

stat	:	expr
			{	DATA(parser)->v_Result = *$1;  
				releasedbl(parser, $1); }
	;

tscale : SCALE
	{ $$ = $1 }

tscale : tscale SCALE
	{ $$ = $1 }

expr	:	'(' expr ')'
			{	$$ = $2; }
	|	expr '+' expr
			{	$$ = $1;  *$$ += *$3;  releasedbl(parser, $3);}
	|	expr '-' expr
			{	$$ = $1;  *$$ -= *$3;  releasedbl(parser, $3);}
	|	expr '*' expr
			{	$$ = $1;  *$$ *= *$3;  releasedbl(parser, $3);}
	|	expr '/' expr
			{	$$ = $1;  *$$ /= *$3;  releasedbl(parser, $3);}
	|	expr '>' expr
			{	$$ = $1;  *$$ = *$$ > *$3;  releasedbl(parser, $3);}
	|	expr '<' expr
			{	$$ = $1;  *$$ = *$$ < *$3;  releasedbl(parser, $3);}
	|	expr '<' '=' expr
			{	$$ = $1;  *$$ = *$$ <= *$4;  releasedbl(parser, $4);}
	|	expr '>' '=' expr
			{	$$ = $1;  *$$ = *$$ >= *$4;  releasedbl(parser, $4);}
	|	expr '=' '=' expr
			{	$$ = $1;  *$$ = *$$ == *$4;  releasedbl(parser, $4);}
	|	expr '=' expr
			{	$$ = $1;  *$$ = *$$ == *$3;  releasedbl(parser, $3);}
	|	expr '&' expr
			{	$$ = $1;  *$$ = *$$ && *$3;  releasedbl(parser, $3);}
	|	expr ':' expr
			{	$$ = $1;  *$$ = *$$ || *$3;  releasedbl(parser, $3);}
	|	expr '%' expr
			{	$$ = $1;  *$$ = (double)(((int)*$$) % ((int)*$3));
					  releasedbl(parser, $3);}
	|	'-' expr	%prec UMINUS
			{	$$ = $2;  *$$ = - *$$; }
	|       CONST tscale
			{	$$ = $1;  *$$ *= DATA(parser)->SF[(int)$2]; }
	|	CONST
			{	$$ = $1;  *$$ *= DATA(parser)->SF[
					(int)(DATA(parser)->v_DefaultScale)
				]; }
	;

%%
