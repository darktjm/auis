/* testparse.c	- test the parse object */
/*
	Copyright Carnegie Mellon University 1992 - All rights reserved
	$Disclaimer: 
# Permission to use, copy, modify, and distribute this software and its 
# documentation for any purpose and without fee is hereby granted, provided 
# that the above copyright notice appear in all copies and that both that 
# copyright notice and this permission notice appear in supporting 
# documentation, and that the name of IBM not be used in advertising or 
# publicity pertaining to distribution of the software without specific, 
# written prior permission. 
#                         
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD 
# TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF 
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL ANY COPYRIGHT 
# HOLDER BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION 
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
#  $
*/
#include <andrewos.h>
#include <environ.H>
#include <text.H>
#include <toksym.H>

#include <ness.H>
#include <tlex.H>

static toksym_scopeType grammarscope;
static struct toksym *proto;

#include <ness.tlc>


	static void
EnterReservedWord(void *rock, char *w, int i)
{
	struct toksym *s;
	boolean newc;
	s = toksym::TLocate(w, proto, grammarscope, &newc);
	s->toknum = i;
}

int main(int argc, char **argv)
{
	class ness *parser = new class ness;
	struct tlex *lexalyzer;
	struct text *input;
	int token;
	void *yylval;

	proto = new toksym;
	grammarscope = toksym::TNewScope(toksym_GLOBAL);
	parser::SetDebug(TRUE);

	input = new text;
	input->Read(fopen("test.n", "r"), 0);
	
	lexalyzer = tlex::Create(&ness_tlex_tables, NULL, 
			input, 0, input->GetLength());
	(parser)->EnumerateReservedWords(EnterReservedWord, NULL);

	printf("Parse returns %d\n", (parser)->Parse(tlex::LexFunc, lexalyzer));

	printf("\n");
	
	input->Read(fopen("ttest.d", "r"), 0);
	(lexalyzer)->SetText(input, 0, (input)->GetLength());
	while ((token = tlex::LexFunc(lexalyzer, &yylval))) {
		long pos, len;
		pos = (lexalyzer)->RecentPosition(0, &len);
		printf("%d at %d length %d\n", token, pos, len);
	}
	printf("Completed successfully\n");
}
