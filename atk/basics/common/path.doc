\begindata{text,538608376}
\textdsversion{12}
\template{be2guide}
\define{example
menu:[Region~4,Example~12]
attr:[LeftMargin LeftMargin Inch 32768]
attr:[Justification LeftJustified Point 0]
attr:[Flags NoFill Int Set]
attr:[Flags KeepPriorNL Int Set]
attr:[Flags KeepNextNL Int Set]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize PreviousFontSize Point -2]}
\define{global
}
\define{symbol

attr:[Flags IncludeBeginning Int Clear]
attr:[Flags IncludeEnd Int Clear]
attr:[FontFamily symbol Int 0]}
\define{symbola

attr:[Flags IncludeBeginning Int Clear]
attr:[Flags IncludeEnd Int Clear]
attr:[FontFamily symbola Int 0]}
\define{sansserif
menu:[Font~1,Sans Serif~42]
attr:[FontFamily AndySans Int 0]}
\define{verbatim
menu:[Region~4,Verbatim~15]
attr:[Justification LeftJustified Point 0]
attr:[Flags NoFill Int Set]
attr:[Flags KeepPriorNL Int Set]
attr:[Flags KeepNextNL Int Set]
attr:[Flags TabsCharacters Int Set]
attr:[Flags IncludeBeginning Int Set]
attr:[Flags IncludeEnd Int Clear]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]}
\define{caption
menu:[Title~3,Caption~30]
attr:[Justification Centered Point 0]
attr:[Flags KeepPriorNL Int Set]
attr:[Flags KeepNextNL Int Set]
attr:[Flags IncludeBeginning Int Set]
attr:[Flags IncludeEnd Int Clear]
attr:[FontFace Bold Int Set]}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{strikethrough
menu:[Font~1,Strike Through~42]}
\define{changebar
menu:[Font~1,Change Bar~43]
attr:[Flags ChangeBar Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title~3,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags IncludeBeginning Int Clear]
attr:[Flags IncludeEnd Int Clear]
attr:[FontFace Italic Int Set]}
\define{footnote

attr:[Flags OverBar Int Set]
attr:[Flags IncludeEnd Int Set]
attr:[Flags IncludeBeginning Int Clear]
attr:[FontSize PreviousFontSize Point -2]}
\define{red
menu:[Color,Red]
attr:['color' 'Red']}
\define{yellow
menu:[Color,Yellow]
attr:['color' 'Yellow']}
\define{green
menu:[Color,Green]
attr:['color' 'Green']}
\define{cyan
menu:[Color,Cyan]
attr:['color' 'Cyan']}
\define{blue
menu:[Color,Blue]
attr:['color' 'Blue']}
\define{magenta
menu:[Color,Magenta]
attr:['color' 'Magenta']}
\define{itemize
}
\define{enumerate
menu:[Region~4,Enumerate~30]
attr:[LeftMargin LeftMargin Inch 32768]}
\define{excerptedcaption

attr:[LeftMargin LeftMargin Inch 32768]
attr:[RightMargin RightMargin Inch 32768]
attr:[FontFace Bold Int Set]
attr:[FontFace Italic Int Set]}
\define{literal
menu:[Region~4,Literal~62]
attr:[Flags PassThru Int Set]}
\define{black
menu:[Color,Black]
attr:['color' 'Black']}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\define{helptopic
menu:[Region,Helptopic]
attr:[FontFace Italic Int Set]
attr:[FontFace Bold Int Clear]}
\define{function
}
\define{keyword
}
\define{classname
menu:[Font~1,ClassName]
attr:[FontFace Bold Int Set]
attr:[FontFace Italic Int Set]}
\define{methodname
menu:[Font~1,MethodName]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]}
\chapter{Class \classname{path} Documentation}


\bold{	Base Classes: } \classname{observable, traced, ATK}\bold{

	Files:}\sansserif{ atk/widgets/awidgetview.H, awidgetview.C}\bold{

	Can be instantiated.  Can be a base class.}


\smaller{\flushright{Documenter:  W.J.Hansen}}


A \classname{path} object caches information about a pathname--whether or 
not it names a directory, and if so, what directories and files it contains.


The information returned by \methodname{IsDirectory}, 
\methodname{GetFiles}, \methodname{GetDirs}, \methodname{GetNumFiles} and 
\methodname{GetNumDirs} is only as recent as the last call to 
\methodname{Scan}.  \methodname{Scan} will stat the directory, and re-read 
it only if necessary.


A few miscellaneous pathname string manipulation functions are also 
provided.



\section{Members of class \classname{path}}


Basic methods of the class


\leftindent{\description{static class path *\methodname{Create}(char 
*pointeeName)

char *\methodname{GetPath}()

boolean \methodname{Scan}(boolean statEverything)

boolean \methodname{IsDirectory}()

char **\methodname{GetFiles}()

char **\methodname{GetDirs}()

long \methodname{GetNumFiles}()

long \methodname{GetNumDirs}()


void \methodname{Input}(FILE *fp)

void \methodname{Output}(FILE *fp)}}


Useless methods

\leftindent{\description{
char *\methodname{GetTruncatedPath}()

void \methodname{ReleaseFiles}(char **filelist)

void \methodname{ReleaseDirs}(char **dirlist)}}


Pathname string manipulation

\leftindent{\description{
static char *\methodname{UnfoldFileName}(char *fromString, char *toString, 
char *baseName)

static boolean \methodname{ModifyToParentDirectory}(char *filepath, boolean 
isDirectory)}}


Finding a file by looking in a list of directories

\leftindent{\description{
static void \methodname{FindFileInPath}(char *retbuff, char *pathList, char 
*fname)}}


Truncating names for display


\leftindent{\description{static char *\methodname{TruncatePath}(char 
*filepath, char *resultPath, long limit, boolean tryHome)

static void \methodname{FreeTruncatedPaths}()

static void \methodname{InputTruncatedPathCache}(FILE *fp)

static void \methodname{OutputTruncatedPathCache}(FILE *fp)

}}
Making a file name relative


\leftindent{\description{static boolean 
\methodname{RelativizePathname}(char *buf, char *basepath)}}



\section{Concepts}


\subsection{Pointee}


\leftindent{A \classname{path} object is created with 
\methodname{path::Create}(\paramname{pointeeName}), where 
\paramname{pointeeName} is a pathname.  The entity--file or 
directory--named by \paramname{pointeeName} is the "pointee" of the object. 
 If the pointee is a directory, information about its contents can be 
gotten from the path object.}


\subsection{Truncated}


\leftindent{A path is truncated to make it small enough to display in a 
given space.  Generally, the beginning of the path is eliminated.  (This is 
used for generating the name at the top of windows.)}\description{


}
\section{Methods of \classname{path}}


static class path *\methodname{Create}(char *\paramname{pointeeName})

\leftindent{Creates a path object for the given \paramname{pointeeName}. 
 The file system entity ( a file or directory) named by pointeeName becomes 
the "pointee" of the object.  Returns a pointer to the object.}


static void \methodname{FindFileInPath}(char *\paramname{retbuff}, char 
*\paramname{pathList}, char *\paramname{fname})

\leftindent{\paramname{PathList }is a list of pathnames separated by :'s 
(or by ;'s in DOS).  The list is scanned and each element is checked to see 
if it contains the file \paramname{fname}.  If \paramname{fname} is found, 
the full path to it is returned in \paramname{retbuf}.  \



\bold{WARNING:} Directory contents are not cached, so every call to this 
function will potentially do a lookup in each directory listed in the path.


\bold{WARNING:}  \paramname{retbuf} must be long enough for the longest 
pathname.  \



\bold{WARNING:} No element of \paramname{pathList} may exceed 255 bytes. } \



static void \methodname{FreeTruncatedPaths}()

\leftindent{Releases the memory occupied by cached home directory names.}


char **\methodname{GetDirs}()

\leftindent{Returns a pointer to an array of strings.  Each element is the 
name of a directory within the object's pointee.   If the object's path is 
not a directory or is a directory containing no subdirectories, 
\methodname{GetDirs} returns NULL.}


char **\methodname{GetFiles}()

\leftindent{Returns a pointer to an array of strings.  Each element is the 
name of a file within the object's pointee.   If the pointee is not a 
directory or is a directory having no contained files, \methodname{GetFiles} 
returns NULL.

}
long \methodname{GetNumDirs}()

\leftindent{Returns the number of directories that are children of the 
object's pointee.  (Warning: \methodname{GetNumDirs} may be invalid if 
\methodname{GetDirs} is NULL.)}


long \methodname{GetNumFiles}()

\leftindent{Returns the number of files that are children of the object's 
pointee.  If the object's pointee is a file, returns 0.  (Warning: 
\methodname{GetNumFiles} may be invalid if \methodname{GetFiles} is NULL.)

}
char *\methodname{GetTruncatedPath}()

\leftindent{Returns a version of the object's pathname "truncated" so it 
fits in MAXPATHLEN characters.  The name will be shortened only if it can 
be changed to begin with ~ or ~user.  (And it is changed ot this form, even 
if it gets longer!)}


char *\methodname{GetPath}()

\leftindent{Returns the object's path.  (The value for which Create was 
called.)}


void \methodname{Input}(FILE *\paramname{fp})

\leftindent{Reads from \paramname{fp} three lines written by 
\methodname{Output} and re-establishes this path object as a clone of the 
one written out.  \



\bold{WARNING: } Incorrect results may occur if the directory structure has 
changed.}


static void \methodname{InputTruncatedPathCache}(FILE *\paramname{fp})

\leftindent{Reads from \paramname{fp} a set of cache entries for the list 
of home directories.  This list should have been created with a call to 
\methodname{OutputTruncatedPathCache}.}


boolean \methodname{IsDirectory}()

	True iff the object's pointee is a directory.


void \methodname{Output}(FILE *\paramname{fp})

\leftindent{Writes three lines to \paramname{fp} describing the path 
object:  whether or not it is a directory, what its pointee pathname is, 
and what its truncated pathname is.}


static void \methodname{OutputTruncatedPathCache}(FILE *\paramname{fp})

\leftindent{Writes to \paramname{fp} the cache of home directory names and 
abbreviations.}


static boolean \methodname{ModifyToParentDirectory}(char 
*\paramname{filepath}, boolean \paramname{isDirectory})

\leftindent{Modifies the string \paramname{filepath} so it refers to the 
parent directory of its current target.  If 
\leftindent{\paramname{isDirectory}} is False and \paramname{filepath} ends 
in '/', the function has no effect.  Returns True unless 
\paramname{filepath} is shortened to zero characters.}


static boolean \methodname{RelativizePathname}(char *buf, char *basepath, 
int maxup)

\leftindent{If possible, shortens \paramname{buf} to a filename relative to 
that given in \paramname{basepath}.  The shortened name will include a 
maximum of \paramname{maxup} leading instances of "../".  If name cannot be 
shortened, returns FALSE;  otherwise TRUE.}


void \methodname{ReleaseFiles}(char **\paramname{filelist})

void \methodname{ReleaseDirs}(char **\paramname{dirlist})

\leftindent{These two methods are not implemented.}


boolean \methodname{Scan}(boolean \paramname{statEverything})

\leftindent{Presumably this path object's pointee is a directory. 
 \methodname{Scan} examines the contents of the directory and records lists 
of the contained files and directories.  \methodname{Scan} is clever enough 
to check the change date on its object's pointee so the scan is not 
repeated unnecessarily.  If the change date is more recent than the last 
scan, or if \paramname{statEverything} is True, the scan is repeated and 
 \methodname{ObservedChanged} is called.


Returns True if the object's pointee is not a directory or if it is a 
directory and that directory was opened for reading successfully.

}
static char *\methodname{TruncatePath}(char *\paramname{filepath}, char 
*\paramname{resultPath}, long \paramname{limit}, boolean \paramname{tryHome})

\leftindent{Truncates a copy of \paramname{filepath} to a string of at most 
\paramname{limit} characters. Returns a pointer to the truncated string. 
 If the incoming \paramname{result} value is non-NULL, the truncated string 
is stored there and \paramname{result} is returned;  if the incoming 
\paramname{result} value is NULL, a new string is created and the calling 
function must free it.


If \paramname{tryHome} is true, the beginning of the path may be replaced 
by ~ or ~user.  User home directories are stored in a cache which may be 
cleared by calling \methodname{FreeTruncatedPaths}().}


static char *\methodname{UnfoldFileName}(char *\paramname{fromString}, char 
*\paramname{toString}, char *\paramname{baseName})

\leftindent{Processes the pathname in \paramname{fromString} to produce a 
canonical pathname consisting of names separated by slashes.  If the name 
must be modified, it is copied to \paramname{toString}.  Returns either 
\paramname{fromString} or \paramname{toString} depending on whether the 
file name needed to be unfolded.


The following are interpreted to derive the name:


\leftindent{\description{leading spaces and tabs are deleted

$(...) is replaced by the value of ... from the environment

. and .. are removed appropriately

\leftindent{but an initial /../ is retained}

leading X: is retained, where X is a DOS driveletter

a leading ~ is replaced by the home directory

\leftindent{for AFS, the form may be ~name@cellname}}}


If \paramname{fromString} does not begin with ~, /, or driveletter:/, the 
name is a relative filename.  If \paramname{baseName} is supplied, it will 
be the string used as the base to which the file is relative.  If 
\paramname{baseName} does not begin with /, the current directory from 
\methodname{im::GetDirectory} is used as the base.  Fail all else, / will 
be supplied as the base directory, although this is probably not useful.

}\
\begindata{bp,538824648}
Version 2
n 0
\enddata{bp,538824648}
\view{bpv,538824648,0,0,0}

Copyright 1995 Carnegie Mellon University.  All rights reserved.

\enddata{text,538608376}
