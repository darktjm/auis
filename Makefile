# Makefile generated by imake - do not edit!

#==================================================
# Copyright IBM Corporation 1988,1991 - All Rights Reserved
# Copyright Carnegie Mellon Univ. 1993,1996 - All Rights Reserved
# For full copyright information see:'andrew/config/COPYRITE'
#==================================================

# ##################################################
# This Makefile is automatically generated by
# imake.  Do not modify it or you will lose your
# changes when imake generates makefiles again.
# Ignore this message if you are not using imake.
# ##################################################

# $Disclaimer:
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted, provided
# that the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation, and that the name of IBM not be used in advertising or
# publicity pertaining to distribution of the software without specific,
# written prior permission.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD
# TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL ANY COPYRIGHT
# HOLDER BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#  $

all::

.SUFFIXES:
.SUFFIXES: .PS .o .snf .rtx .C .c .s .spp .y .l .ch .mss .bdf .fb .pcf .i

        ALL_INCLUDES = -I. $(LOCALINCLUDES) $(INCLUDES)
        ALL_DEFINES = $(STD_DEFINES) $(DEFINES)
        CPPC_DEFINES = $(STD_CPPC_DEFINES) $(DEFINES)
        CPPFLAGS = $(COMPILERFLAGS) $(CDEBUGFLAGS) $(CPPINCLUDES) $(ALL_INCLUDES) $(CPPC_DEFINES)
        CPPDYNFLAGS=$(CPPFLAGS)
        CFLAGS = $(COMPILERFLAGS) $(CDEBUGFLAGS) $(ALL_INCLUDES) $(ALL_DEFINES)
        TESTING_CFLAGS = -DTESTINGONLYTESTING $(CFLAGS)
        LDFLAGS = $(ALLAFSOBJFILE) $(RESOLVLIB) $(SYS_LIBRARIES) 	$(SYSAUX_LIBRARIES) 	$(LOCAL_SHARED_LIB_PATH) 	$(SHARED_LIB_PATH) 	$(DYN_LINK_LIB)

CPPLDFLAGS=$(LDFLAGS)
       DYNLDFLAGS=$(LDFLAGS)
       DYNPROGLDFLAGS=$(LDFLAGS)

# ##################################################
# The following comes from the platform.tmpl
# ##################################################

#
# The following comes from presite.h
#

#
#  The following comes from the macro file
#

MFLAGS=

        SYSTEM_H_FILE = ix86_Linux/system.h

SYS_CONFDIR = ix86_Linux

        SYS_IDENT = ix86_Linux
        SYS_OS_ARCH = ix86_Linux

#
#  The following is from the allsys.mcr file, and may be over-ridden
#  by the platform-specific system.mcr file or the
#  site-specific site.mcr file.
#

DASHL=-L

        KRBLIB =

        BASEDIR = /usr/local/auis
        DESTDIR = ${BASEDIR}

        XUTILDIR = /usr/bin/X11
        XINCDIR = /usr/include
        XLIBDIR = /usr/lib

        XMAKEDEPEND = $(XUTILDIR)/makedepend
        IMAKE = $(XUTILDIR)/imake
        XMKFONTDIR = $(XUTILDIR)/mkfontdir

        XFC =  $(XUTILDIR)/bdftopcf

        CDEBUGFLAGS = -O

        SHELL = /bin/sh

        CSHELL = /bin/csh

        CC = gcc
        CPPC = g++
        LOCALDIR = /usr/local
       ATKLIBLDARGS=$(CPPSTDLIB) $(GCCLIB)  -lc $(LOCAL_SHARED_LIB_PATH) $(SHARED_LIB_PATH)
        GENREFS = $(BASEDIR)/etc/grefs
        REFSNM = /bin/nm

        MALLOCALIGNMENT = 4

        CRT0PATH = /lib/crt0.o
        CLIB = /lib/libc.a

        RESOLVLIB =

        NETLIBS =

        SUPLIBS =

LEXLIB = -lfl

        ADDALIASES = $(BASEDIR)/etc/addalias
        CLASS = ${BASEDIR}/bin/class

DYNEXELIBS = $(BASEDIR)/lib/libATKDynLoad.a $(BASEDIR)/lib/libATKLink.a

DYNMAIN = ,DynM.$$$$
POSTDYNFLAGS = $(CPPSTDLIB)  $(GCCLIB) -lc
DYNPOSTPROCESS =@true
DYNLINKPROG = $(LINKPREFIX) $(CPPC)
MKDYNMAIN = $(BASEDIR)/etc/mkdynmain

INCLUDES =  -I${BASEDIR}/include/atk -I${BASEDIR}/include -I${XINCDIR}

        DEPENDSCRIPT = $(TOP)/config/depend.csh
        IRULESRC = $(TOP)/config
        FDBWM = $(BASEDIR)/bin/fdbwm
        FDBBDF = $(BASEDIR)/bin/fdbbdf

        TOP = .
        AS = as
        CPP = /lib/cpp
        LD = ld
        LINT = lint

        INSTALL = $(BASEDIR)/etc/install

        TAGS = ctags
        RM = rm -f
        MV = mv
        CP = cp
        LN = ln -s
        RANLIB = ranlib
        AR = ar clq
        ARDEL = ar d
        CHMODW = chmod +w
        LS = ls
        AWK = awk
        SORT = sort
        TR = tr
        NM = nm
        MAKE = make
        SED = sed
        LEX = lex
        YACC = yacc
        SCRIBE = scribe
        LINTOPTS = -axz
        LINTLIBFLAG = -C
        STD_DEFINES =

#  This MATHLIB macro is a workaround for a bug in HPUX8.0 ld.
#  That loader has problems linking normal archive libraries
#  into a shared library.  [console/cmd, ness/objects]
#  This macro is made empty in the appropriate hp system.mcr
#  files.
        MATHLIB = -lm
# By default the same math library is used everywhere
# on some systems different libs may be needed, or
# the math library may need to be omitted in the
# dynamic objects and shared libraries. (e.g. HP)
        EXEMATHLIB = $(MATHLIB)
        DYNMATHLIB = $(MATHLIB)
        LIBMATHLIB = $(MATHLIB)

JPEGLIBDIR=$(BASEDIR)/lib
        JPEGLIB =$(JPEGLIBDIR)/libjpeg.a

TIFFLIBDIR=$(BASEDIR)/lib
        TIFFLIB = $(TIFFLIBDIR)/libtiff.a

ASMPP_CC = $(CPP)
AS_FLAGS =

LOCALPACKAGEDIRS=
STDPACKAGEDIRS=$(BASEDIR)/lib/packages $(BASEDIR)/lib/packages/atk

FULLATKDLIBDIR=$(DESTDIR)"/lib/atk"
ATKTMPDYNEXTM=+
ATKDYNEXTM=+
ATKLIBEXTM=a
ATKDYNPREFIXM=

SYS_DYNDIR= $(SYS_CONFDIR)

ATKSTDLIBS=
ATKLIBLIBS=
ATKDYNLIBS=
ATKEXELIBS=
LOCALSTDLIBS=
LOCALLIBLIBS=
LOCALEXELIBS=
LOCALDYNLIBS=

GPPLIBS=\\1libstdc++.a
CPPSTDLIB=`$(CC) -v  2>&1 | sed -n -e 's@Reading specs from \\(.*\\)gcc-lib/\\(.*\\)specs@$(GPPLIBS) \\1gcc-lib/\\2libgcc.a@p' `
GCCLIB=`$(CC) -v  2>&1 | sed -n -e 's@Reading specs from \\(.*\\)gcc-lib/\\(.*\\)specs@\\1gcc-lib/\\2libgcc.a@p' `
CPPDEPINCLUDES="`$(CC) -v  2>&1 | sed -n -e 's@Reading specs from \\(.*\\)gcc-lib/\\(.*\\)specs@-I\\1g++-include\\ -I\\1gcc-lib/\\2include@p'`"

GNUEMACS=/usr/local/bin/gnu-emacs

        UTILLIB = $(BASEDIR)/lib/libutil.a $(BASEDIR)/lib/libafs.a
        PRSLIB =

ATKDLIBDIRM="/lib/atk"

#
#  End of what comes from the allsys.mcr file.
#

OSSUPPORT= ossupport
        XLIBDIR = /usr/lib
        XINCDIR = /usr/include
        XFC = /usr/bin/bdftopcf
        XBINDIR = /usr/bin
        XUTILDIR = /usr/bin
	XMKFONTDIR = $(XUTILDIR)/mkfontdir

        MALLOCALIGNMENT = 8
        CDEBUGFLAGS =
XMAKEDEPEND=$(XUTILDIR)/gccmakedep

DYNLINKPROG = $(LINKPREFIX) gcc -shared
POSTDYNFLAGS=
PREDYNFLAGS=
DYN_LINK_LIB=-ldl
MKDYNMAIN=$(BASEDIR)/etc/mkdynmain -ctor
ATKLIBEXTM =so
ATKDYNEXTM=so
ATKDYNPREFIXM=lib
ATKTMPDYNEXTM=so

ATKLIBFLAGS = -s

PICFLAG=
ECOMPFLAGS=

NORELS=libjpeg.a libtiff.a libutil.a
LINKPREFIX = $(BASEDIR)/etc/relativize $(LOCALNORELS) $(NORELS) ---

        SYS_LIBRARIES = $(DESTDIR)/lib/libatkos.a

CPPC = g++

LEXLIB = -lfl
LEX = flex
SHARED_LIB_PATH=-Wl,-R,/usr/local/auis/lib/atk:$(DESTDIR)/lib/atk:$(BASEDIR)/lib/atk
ATKLIBLDARGS=$(CPPSTDLIB) $(GCCLIB) $(SHARED_LIB_PATH)

AFSBASEDIR =

    XUTILDIR = /usr/bin

        CDEBUGFLAGS = -g3 -O2 -fPIC -D_XOPEN_SOURCE -D_DEFAULT_SOURCE -Wmissing-declarations -Wold-style-definition -Wextra -Wno-unused-parameter -Wmissing-declarations -Wno-unused-result -Wno-missing-field-initializers -Wwrite-strings -march=athlon64 -msse3 -msse3 -pipe -Wall

    RESOLVLIB =  -lresolv

JPEGLIBDIR=$(BASEDIR)/lib
        JPEGLIB =$(JPEGLIBDIR)/libjpeg.a

TIFFLIBDIR=$(BASEDIR)/lib
        TIFFLIB = $(TIFFLIBDIR)/libtiff.a

#
#  Back from the macro file
#

# ##################################################
# Back from platform.tmpl
# ##################################################

         MFLAGS = -$(MAKEFLAGS)

INSTMODEFLAGS = -c -m
        INSTUIDFLAGS = $(INSTMODEFLAGS) 4755

        INSTLIBFLAGS = $(INSTMODEFLAGS) 0664
        INSTDOFLAGS = $(INSTMODEFLAGS) 0444

        INSTINCFLAGS = $(INSTMODEFLAGS) 0444
        INSTMANFLAGS = $(INSTMODEFLAGS) 0444
        INSTAPPFLAGS = $(INSTMODEFLAGS) 0444
        INSTPROGFLAGS = $(INSTMODEFLAGS) 0555
        INSTPROGRWFLAGS = $(INSTMODEFLAGS) 0755
        INSTCLASSPROGFLAGS = $(INSTPROGFLAGS)

MACROFILE = ix86_Linux/system.mcr

        IMAKE_CMD = $(IMAKE) -Timake.tmpl -I. -I$(IRULESRC) -s Makefile
        IMAKE_LIBCMD = $(IMAKE) -Timake.tmpl -I. -I$(IRULESRC) -s Makefile.lib -f Imakefile.lib
        IMAKE_RUNAPPCMD = $(IMAKE) -Timake.tmpl -I. -I$(IRULESRC) -s Makefile.run -f Imakefile.run
        IMAKE_DYNCMD = $(IMAKE) -Timake.tmpl -I. -I$(IRULESRC) -s Makefile.dyn -f Imakefile.dyn
        DOTDOTIMAKE_CMD = $(IMAKE) -Timake.tmpl -I. -I../$(IRULESRC) -s Makefile
MKPARSERCLASS = $(BASEDIR)/bin/mkparserclass
MKPARSER = $(BASEDIR)/bin/mkparser

# ##################################################
# The following comes from andrew.rls
# ##################################################

PATHSEP=:

FONTEXT = snf

FONTEXT = pcf

# ##################################################
# Back from andrew.rls
# ##################################################

.c.o:
	$(RM) $@
	$(CC) -c $(CFLAGS) $*.c
.C.o:
	$(RM) $@
	$(CPPC) $(CPPFLAGS) -c $*.C
.i.o:
	$(RM) $@
	$(CPPC) $(CPPFLAGS) -c $*.C
.ii.o:
	$(RM) $@
	$(CPPC) $(CPPFLAGS) -c $*.C

all::
All:: all
Doc:: doc
doc:: install.doc
Aliases:: aliases
aliases:: install.alias
Install:: install
install:: all install.time doc
system: Install
World:: world
world:: depend install
Tidy:: tidy
Clean:: clean
clean:: tidy

dependInstall:: depend
	make DESTDIR=$(DESTDIR) install

dependAll:: depend
	make DESTDIR=$(DESTDIR) all

subMakefiles::
depend::
all::

tidy::
	$(RM) "#"* ,* *~ *.CKP *.BAK *.bas errs core
	$(RM) *.ln *.o  tags TAGS make.log
clean::
	$(RM)  *.a *.$(ATKLIBEXTM) *.snf *.pcf *.fb
	$(RM) *.exp install.time install.doc

clean::
	$(RM) *.$(ATKDYNEXTM)

Makefile:: Imakefile \
	$(IRULESRC)/andyenv.h \
	$(IRULESRC)/imake.tmpl \
	$(IRULESRC)/andrew.rls \
	$(IRULESRC)/allsys.h \
	$(IRULESRC)/allsys.mcr \
	$(IRULESRC)/site.rls \
	$(IRULESRC)/site.h \
	$(IRULESRC)/site.mcr \
	$(IRULESRC)/$(MACROFILE) \
	$(IRULESRC)/$(SYSTEM_H_FILE)
		$(IMAKE_CMD) -DTOPDIR=$(TOP) ; \
		touch .depends; \
		cat .depends >>Makefile

tags::
	$(TAGS) -w *.C *.H
	$(TAGS) -xw *.C *.H > TAGS

# ##################################################
# The following comes from the local Imakefile
# ##################################################

AMS = ams atkams

MKFONTDIR = xmkfontd

CONTRIB = contrib

HELP = helpindex

WWW = WWW

DIRS = $(DESTDIR)  	$(DESTDIR)/bin 	$(DESTDIR)/config 	$(DESTDIR)/etc 	$(DESTDIR)/include 	$(DESTDIR)/lib 	$(DESTDIR)/lib/prs 	$(DESTDIR)/doc 	$(DESTDIR)/doc/ADMINISTRATOR 	$(DESTDIR)/doc/DEVELOPER 	$(DESTDIR)/doc/PROGRAMMER 	$(DESTDIR)/doc/MAIL 	$(DESTDIR)/help

SUBDIRS = ossupport inst config overhead atk $(AMS) $(WWW) $(CONTRIB) $(SITE) $(MEGA) $(MKFONTDIR) $(HELP) doc

depend::
	@echo 'Checking that BASEDIR is not the location of the source files.'
	@sh -c '(if [ "$(BASEDIR)" = "`pwd`" ]; then 		echo "%% BASEDIR must be different from the location of the source files."; 		echo "%% Currently, they are both $(BASEDIR) ."; 		echo "%% This must be fixed before proceeding with installation."; 		echo "%% (You may wish to move the source files to $(BASEDIR)/src .)"; 		exit 1; 	fi; exit 0)'

	@echo 'Checking that DEFAULT_ANDREWDIR_ENV is defined.'

World::
	@echo
	@echo "AUIS Copyright 1989,96 CMU, IBM, et al.  All rights reserved."
	@cat <DISCLAIMER
	date

dependInstallCramped:: depend
	make DESTDIR=$(DESTDIR) install
	echo building ${SUBDIRS}
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
	(cd $$i; echo "building (dependInstall)" "(`pwd`)"; \
	$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) dependInstall Clean;test $$? -eq 0 || exit 1 ); test $$? -eq 0 || exit 1; done)

install.time:: makedirs
	@echo -n ''
install.doc:: makedirs
	@echo -n ''
makedirs::
	@echo "Checking Destination Directories...."
	@sh -c 'for i in $(DIRS);  do  \
		if [ -f $$i ]; then  \
			echo Mkdir: $$i is a FILE; \
			exit 1; \
		elif [ ! -d $$i ]; then  \
			echo Making directory $$i; \
			mkdir $$i;\
		fi; \
	done; \
	exit 0'

DEST_X = $(DESTDIR)/X11fonts

install.time:: makedirs
	@echo -n ''
install.doc:: makedirs
	@echo -n ''
makedirs::
	@echo "Checking Destination Directories...."
	@sh -c 'for i in $(DEST_X);  do  \
		if [ -f $$i ]; then  \
			echo Mkdir: $$i is a FILE; \
			exit 1; \
		elif [ ! -d $$i ]; then  \
			echo Making directory $$i; \
			mkdir $$i;\
		fi; \
	done; \
	exit 0'

 IMAKE_CMD = $(IMAKE) -f Amakefile -Timake.tmpl -I. -I$(IRULESRC) -s Makefile
Makefile::Amakefile
	$(IMAKE_CMD) -DTOPDIR=$(TOP) ; 	touch .depends; 	cat .depends >>Makefile

# ##################################################
# Back from the local Imakefile
# ##################################################

all:: $(OBJS)

Makefiles:: Makefile

All::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) $(EXTRASUBDIRS); do \
	    (cd $$i; echo "making" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) All || exit 1 ) || exit 1; done)

dependAll::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) $(EXTRASUBDIRS); do \
	    (cd $$i; echo "depend/making" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) dependAll || exit 1 ) || exit 1; done)

Install::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
	    (cd $$i; echo "installing" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) Install || exit 1 ) || exit 1; done)

Doc::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
	    (cd $$i; echo "installing docs" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) Doc || exit 1 ) || exit 1; done)

Aliases::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
	    (cd $$i; echo "installing aliases" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) Aliases || exit 1 ) || exit 1; done)

dependInstall::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
	    (cd $$i; echo "building (dependInstall)" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) dependInstall || exit 1 ) || exit 1; done)

World::
	@case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
		echo "Making sub Makefiles (`pwd`/$$i)"; \
		$(MAKE) $(MFLAGS) subdirMakefile  \
			NEWTOP=../  MAKE_SUBDIR=$$i || exit 1; \
	done

World::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
	    (cd $$i; echo "building (World)" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) World || exit 1 ) || exit 1; done)

Makefiles:: subMakefiles
subMakefiles::
	@case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS); do \
		echo "Making Makefiles (`pwd`/$$i)"; \
		$(MAKE) $(MFLAGS) subdirMakefile  \
			NEWTOP=../  MAKE_SUBDIR=$$i || exit 1; \
		(cd $$i; $(MAKE) $(MFLAGS) \
						subMakefiles || exit 3); \
	done
subdirMakefile:
	cd $(MAKE_SUBDIR); \
	$(DOTDOTIMAKE_CMD) -DTOPDIR=../$(TOP) ; \
	touch .depends;  \
	cat .depends >>Makefile

Clean::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) $(EXTRASUBDIRS); do \
	    (cd $$i; echo "cleaning" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) Clean || exit 1 ) || exit 1; done)

Tidy::
	@(case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) $(EXTRASUBDIRS); do \
	    (cd $$i; echo "tidying" "(`pwd`)"; \
		$(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) Tidy || exit 1 ) || exit 1; done)

tags::
	@case '$(MFLAGS)' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) $(EXTRASUBDIRS); do \
	    (cd $$i; echo "tagging (`pwd`)"; \
		$(MAKE) $(MFLAGS) TAGS='$(TAGS)' tags; test $$? -eq 0 || exit 1); test $$? -eq 0 || exit 1;\
	done

install.time::
	touch install.time

install.doc::
	touch install.doc

install.alias::

listdirs:
	@echo ${SUBDIRS}

depend::
	$(DEPENDSCRIPT) $(XMAKEDEPEND) 		 "$(ALL_INCLUDES) $(EXTRADEPENDINCLUDES) "$(CPPDEPINCLUDES) "$(ALL_DEFINES)"

# #### DEPENDENCY LINE - DO NOT DELETE #####

