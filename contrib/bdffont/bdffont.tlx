-- Copyright 1992 Carnegie Mellon University. All rights reserved.

tokenclass -errorhandler-
{
	parser->Error(parse_SERIOUS, parm->msg);
	return tlex_IGNORE;
}

tokenclass -global-
	tokennumber token TOKEN

-- whitespace
tokenclass -none-
	set [ \t\r\n\f]
	recognizer ScanWhitespace
	charset continueset [ \t\r\n\f]

-- random unquoted strings : usually a number
tokenclass TOKEN
	set [!#-~]
	recognizer ScanID
	charset continueset [!#-~]
{
	tlex->SetTokenValue((void *)atoi(tlex->GetTokenText()));
	return tlex_ACCEPT;
}

-- STARTCHAR is followed by name of character (max 15 chars)
--	often a single ASCII printable
--	also:  sp for space, ch-dd for decimal digits, Cddd for octal digits
--	or even a name
-- tokentext is the name
tokenclass STARTCHAR
	seq "STARTCHAR"
{
	while (tlex->CurrChar() != '\n' && isspace(tlex->NextChar())) {}
	tlex->StartToken();
	if (tlex->CurrChar() == '\n') {
		/* error, nothing after STARTCHAR: make empty token */
		tlex->BackUp(1);
	}
	while (tlex->Advance() != '\n' && tlex->CurrChar() != EOF) {}
	tlex->EndToken();
	return tlex_ACCEPT;
}

-- the following all return tokennumber TOKEN
--	but the actual token number is returned in yylval
--
tokenclass FOUNDRY
	seq "FOUNDRY"
{
	return SaveTokenNumber(tlex);
}
tokenclass FAMILY
	seq "FAMILY"
{
	return SaveTokenNumber(tlex);
}
tokenclass WEIGHT
	seq "WEIGHT"
{
	return SaveTokenNumber(tlex);
}
tokenclass DEFAULTCHAR
	seq "DEFAULT_CHAR"
{
	return SaveTokenNumber(tlex);
}
tokenclass DEFAULTWIDTH
	seq "DEFAULT_WIDTH"
{
	return SaveTokenNumber(tlex);
}
tokenclass DEFAULTHEIGHT
	seq "DEFAULT_HEIGHT"
{
	return SaveTokenNumber(tlex);
}
tokenclass DEFAULTX
	seq "DEFAULT_X"
{
	return SaveTokenNumber(tlex);
}
tokenclass DEFAULTY
	seq "DEFAULT_Y"
{
	return SaveTokenNumber(tlex);
}
tokenclass DEFAULTDX
	seq "DEFAULT_DX"
{
	return SaveTokenNumber(tlex);
}
tokenclass DEFAULTDY
	seq "DEFAULT_DY"
{
	return SaveTokenNumber(tlex);
}
tokenclass ASCENT
	seq "FONT_ASCENT"
{
	return SaveTokenNumber(tlex);
}
tokenclass DESCENT
	seq "FONT_DESCENT"
{
	return SaveTokenNumber(tlex);
}
tokenclass RESX
	seq "RESOLUTION_X"
{
	return SaveTokenNumber(tlex);
}
tokenclass RESY
	seq "RESOLUTION_Y"
{
	return SaveTokenNumber(tlex);
}
tokenclass WEIGHTNAME
	seq "WEIGHT_NAME"
{
	return SaveTokenNumber(tlex);
}


-- the following simply report their tokennumber
--
tokenclass STARTFONT
	seq "STARTFONT"
tokenclass SIZE
	seq "SIZE"
tokenclass FONTBOUNDINGBOX
	seq "FONTBOUNDINGBOX"
tokenclass STARTPROPERTIES
	seq "STARTPROPERTIES"
tokenclass ENDPROPERTIES
	seq "ENDPROPERTIES"
tokenclass CHARS
	seq "CHARS"
tokenclass ENCODING
	seq "ENCODING"
tokenclass SWIDTH
	seq "SWIDTH"
tokenclass DWIDTH
	seq "DWIDTH"
tokenclass BBX
	seq "BBX"
tokenclass ATTRIBUTES
	seq "ATTRIBUTES"
tokenclass ENDCHAR
	seq "ENDCHAR"
tokenclass ENDFONT
	seq "ENDFONT"


-- for a COMMENT line, the TokenText is the entire line, excluding \n
--
tokenclass COMMENT
	seq "COMMENT"
	recognizer ScanComment
	boolean SaveText TRUE
	char *endseq "\n"
{
	return tlex_ACCEPT;
}

-- for a FONT line, the TokenText is the entire line, excluding \n
--
tokenclass FONT
	seq "FONT"
	recognizer ScanComment
	boolean SaveText TRUE
	char *endseq "\n"
{
	return tlex_ACCEPT;
}

-- bitmaps are read from succeeding lines and attached to bdffont_ReadCharDefn
--
tokenclass BITMAP
	seq "BITMAP"
	recognizer ScanComment
	char *endseq "\n"
{
	long row, column;
	long width;
	long alignedwidth;
	long pad;
	int c1, c2;
	unsigned char *bytes;

	bdffont_ReadCharDefn.bitmap =
		(unsigned char *)malloc(bdffont_BitmapSize(&bdffont_ReadCharDefn));
	bytes = bdffont_ReadCharDefn.bitmap;

	width = bdffont_WidthInBytes(bdffont_ReadCharDefn.bbw);
	alignedwidth = bdffont_AlignedWidthInBytes(&bdffont_ReadCharDefn);
	pad = alignedwidth - width;

	c1 = tlex->CurrChar();
	for (row = bdffont_ReadCharDefn.bbh; row > 0; row--) {
		column = width;
		while (column > 0) 
			if (isspace(c1)) 
				c1 = tlex->NextChar();
			else {
				c2 = tlex->NextChar();
				*bytes++ = bdflex_ComposeByte(c1, c2);
				c1 = tlex->NextChar();
				column--;
			}

		/* Ignore any trailing padding present in the file */
		while (c1 != EOF && c1 != '\n')
			c1 = tlex->NextChar();
		c1 = tlex->NextChar();		/* skip newline */

		/* Do the padding ourselves */
		memset(bytes, '\0', pad);
		bytes += pad;
	}
	return tlex_ACCEPT;
}

-- string : copy to TokenText the entire string including quotes
--	double quotes continue the string
--
tokenclass TOKEN
	seq "\""
{
	/* copy delimiters and contents to TokenText
		"" is copied as is, but does not end string */
	tlex->BackUp(1);
	tlex->StartToken();
	tlex->Advance();	/* get initial " */
	while (tlex->CurrChar() != EOF) 
		if (tlex->CurrChar() == '\"') {
			if (tlex->Advance() != '\"') 
				break;
			tlex->Advance();	/* absorb second " */
		}
		else 
			tlex->Advance();
	tlex->EndToken();
	return tlex_ACCEPT;
}
