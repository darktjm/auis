- finish image rewrite:
  - maybe replace Gifify with SnapshotToFile for generic image output
  - maybe de-gif ez2html and other HTML-related stuff
  - maybe build all 3 imageio implementations at once, w/ pref to choose which
    - would need to make them separate shared objects & move back to atk/image
  - test with grayscale images (rasters) and 1-bit bitmaps
  - look at raster library's import/export routines (at least xbm & xwd broken)
  - clean up export/import menus (combine into one, since it's so small)
  - support parameters (other han just quality) for export (needed for
    some image types, but probably OK to defer to external programs)
    - at the very least, support setting file type independently of name
- adew crashes a lot just doing the tutorial
- adew: cut doesn't actually delete
  - when cutting table, table attempts to update due to deferred update
    even though it may be gone.  Thus, crash.
- adew: often clears regions and never redisplays contents (maybe due
  to my "fix" for lack of resize updates)
- adew: no samples for mbuttonv or clicklistV in vallist document anymore
- fix issues found doing load on all objects:
  - webcon spins if awww dies, and app can't exit any more
  - pcontrol dies on init if not PC-RT
- need play module to either work or ignore (atk/music was dropped in 8.0)
- use qsort to sort in deskey instead of external sort command
- adjusting controls doesn't always set modified flag for a document
- sometimes just loading a doc with controls sets modified flag for it
- valgrind access hit with dragon.zip - may be bug in XPutImage, or perhaps
  the way xgraphic abuses CreateImage() to create a template image and
  fills in the values manually
- recompiling some ness code after error crashes (found playing w/ letter.tmpl)
  not yet easily reproducable
- many 3d link buttons in ATK tour have text overlapping bottom edge
  probably some screwy interaction between table and button
- pagedown eventually stops working (e.g. 2rtf)
- questionaire.msg ice cream question doesn't do anything
- org/treev: unfolded expands size, but doesn't shift tree to right
  if needed (i.e., left is severely cut off).  Also doesn't shift tree down
  for horizontal arrangement, but for some reason it allows moving scrollbar
  into negative area)
- org/bush/treev: kb navigation of nodes, printing (outline?)
- sometimes, bush's ^X^C action is to quit without confirmation
  (maybe has to do with bush not setting change flag correctly as well)
- hyperlink: don't update label if label isn't default (or at least
  allow undo of label change)
- printing doesn't really work right:
  - crashes on cleanup (e.g. AndrewProgramming.ez)
  - wrong ps filename (maybe due to crash on cleanup): .n instead of .ps
  - TOC is a nasty mess
- enable mouse scroll wheel
- implement addbutton init command properly (or remove)
  - current implementation just saves the commands in an unused list
    - need to check that it is unused in AMS as well, but probably is
  - Need to figure out what this command should do.  I suppose similar
    to the ness "on mouse" hook.  Need to find out when it's executed.
  - Need to at least provide a way to swap buttons w/o resorting to xmodmap.
- implement call-like command, to execute a command on document load
  [especially useful if this command is ness]
- add help-type hyperlink or other help button of some sort
  - add support for loading files directly in help, instead of just indexed
- fix lack of updates when resizing windows
- fix contrib/tm to use termios, etc.
- org doesn't mark entire doc as modified when doc inset is modified
- view fixes:
  - Implement CanView() everywhere, and use it where needed.
  - Ensure SetDataObject() works with NULL data object
- Get rid of ATKinit.  Use static variables with constructors instead.
- test all apps, all insets, all docs, etc.
  - squash any crashes
  - run valgrind on as much as possible
  - fix example docs to document C++-style code
  - find out purpose of every file installed in auis, and document.
    - get rid of or fill in all that stub documentation (e.g. "proctables")
- general cleanup:
  - remove all warnings
    2x flex output errors that probably can't be fixed:
    overhead/grefs:
    <stdout>:827:18: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    <stdout>:1522:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    <stdout>:2060:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    doc/mkbrowse:
    lex.yy.c:1494:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    lex.yy.c:2032:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]

    visibility errors that probably can't be fixed easily:
    atk/web:
    ./htmlform.H:68:7: warning: ‘htmlform’ declared with greater visibility than the type of its field ‘htmlform::fields’ [-Wattributes]
    ./htmlform.H:68:7: warning: ‘htmlform’ declared with greater visibility than the type of its field ‘htmlform::fields’ [-Wattributes]
    contrib/gofig:
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]

    Pointer aliasing issues that can't be fixed easily:
    contrib/gestures/gsestsrc/gdp:
    set.c:202:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
    set.c:269:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]

    gccmakedep errors that can't be fixed easily:
    overhead/genstatl: (depped before atk/im.H; runapp never compiled here)
    runapp.C:13:16: fatal error: im.H: No such file or directory
    atk/basics/common: (only if magick not selected for build)
    magick.C:11:29: fatal error: wand/MagickWand.h: No such file or directory
    [also atk/basics/common/{devil,magick,freeimage}.C when the dependent
    packages aren't installed.]
  - remove externs in c files
  - remove all statics in header files, if possible (gads, help.h is awful)
  - Unfortunately, there is no easy, portable way to avoid exporting
    symbols from a library which are only shared between members of
    the library.  Then again, I could probably just add gcc-specific
    methods if gcc is detected (like I did with UNUSED and format
    attributes).  Or, I could put the symbols in a namespace named
    after the library, which would at least alleviate namespace pollution.
  - constify pointers if possible
    It's usually better to make structures const by default and cast them to
    non-const when known to be malloc'd than the other way around
      e.g. ErrorGuts() -> only cast if explicit free flag given
    The only exception is when one statically allocated structure uses
    constants, but all else is malloc'd.
      e.g. filetype.C: mapEntry.fileExtension
  - remove type casts if possible
    There's almost never a good reason to cast pointers (well, in C++,
    you have to cast void * to the destination type, but that's it).
      gcc has no "flag all explicit casts" warning flag.
      -Wint-conversion (on by default)
      -Wbad-function-cast
      -Wcast-qual
      -Wcast-align
      -Wconversion
      -Wuseless-cast
      -Wsign-conversion
      -Wfloat-conversion
      -Wint-to-pointer-cast (on by default)
      -Wpointer-to-int-cast (on by default)
  - remove any unsupportable code (i.e., old UNIX, DOS, OS/2)
  - remove any functions which duplicate standard functions (e.g. strdup)
  - make the sysdep stuff more conformant with what I support: Single
    UNIX by default; the only things in Linux-specific dirs and code is
    stuff which is actually Linux-dependent, like the way to generate
    shared objects (loading them is standardized), system paths and
    default commands (e.g. groff, /usr/share/man, etc.) and kernel
    access via proc and Linux-specific libc calls.  Also, update
    porting documents to get rid of obsolete assumptions, like <=14-char
    file names.  Also, update installation instructions as needed.
  - remove all uses of this-> in class methods
  - much of it is C++.  It might be a good idea to look for and remove
    Cisms where C++ does it differently (and presumably the same or better)
    (note that unlike some idiots, I don't consider cpp macros to be C-only)
- find out and possibly remove additional CMU/MIT-specific crap
- build improvements
  - make it possible to build w/o simultaneous install
    It's possible to do "make Makefiles; make All", but some places depend
      on libs/headers from previous dirs to be installed
  - make it possible to use -k and -j (-k mostly works now)
  - make top-level Makefile not disappear w/ "make Makefiles"
  - fix corruption of flags (empty flags become -- eventually)
  - distclean target that removes .depends and Makefile
  - maybe just switch to cmake
- fix UniqueID() and friends:
  - try not to renumber everything every modification; messes up svn diff
  - try to limit to 32 bits to retain compatibility with older systems
- pass unknown keys up the view hierarchy (e.g. pgup within inset often fails)
- build (and clean up) atkbook examples, or chuck them
  - most build and run OK now; need to install somewhere maybe
  - con: use getstats from atk/console.  Builds OK, but not sure what it does
  - flex: builds OK.  Not sure what it does
    - renamed dataobject to flexd to avoid conflict
    - seems to want to be renamed flexpair for compatibility with con
  - switcher: builds OK.  Not sure what it does
- figure out what ANSI standard ansitext refers to, and document it
- get rid of include/ prefix on all headers in doxygen
- implement or get rid of alink, ezscan
- maybe try converting doxy latex output to ez (rtf is hopeless, and
  like the rest of the www, html is javascript-laden bloated mess)
- maybe incorporate app.doc into application.H as well.
- change atom class to be pointer, and no longer force explicit pointer usage
  also removes issue of possible accidental deletion
- add atom::InternStatic which does not strdup (for static lifetime strings)
  - probably doesn't buy enough to be worthwhile, since most atoms are
    created dynamically.  Maybe using a buffer list for string storage
    would be more worthwhile.
- search for tjm comments and see if there are any TODOs there
Long-term:
  - add code snippet inset for literate programming
  - make LaTeX a possible output format (and the default)
  - unicode support
  - internationalization support (probably just GNU gettext)
    currently menus can be replaced, but messages & the like cannot
  - truetype font support using freetype
    not sure if that's a good idea; in my experience, antialiasing makes
    things uglier.  I can already use truetype fonts now directly from X.
  - unicode-bidir support
  - make index entries insets
  - undo
  - freedesktop.org integration
  - move from included bison to standard bison instead of cleaning it up
  - look at removed mail-related stuff to see if anything useful got deleted
    (e.g. ez2ascii claims descendence from messages)
  - look at auis-6.3.1 to see if anything useful got dropped in 8.0
    - rdemo service: probably not worth looking at
    - class system: don't want to touch it
    - overhead/conv: ancient and useless
    - contrib/parsec: maybe
    - atk/music: only because it's referenced by other docs & demos
    - no patience to check big common dirs for missing individuals
  - see if there is an atk repository in /afs/andrew.cmu.edu/ with more
    recent changes to 8.x
  - maybe give the sourceforge atk project another chance and try
    harder to see if there is anything worth salvaging
    - jdm (Journeyman's Development Manager)? undoumented crap
    - mrtools? undocumented crap
    - AIX-specific "ToolChat" support? whatever.
    - Yet Another Crappy Build System - ugh, forget it
    - REXX and perl code within ez?  Not worth it.  If I replace ness
      with anything, it'll be lua.
    - given the renaming and moving shit around, it's hard to tell if
      they actually fixed any bugs, and probably more effort to refind
      and refix the bugs than to try to figure out what changed.
  - maybe reformat into a slightly less ugly coding style.  I fixed a
    few bugs due to bad if/else indentation, and I hate the indentation
    style used in general.  However, unless I can find a tool to do this
    without too much aggravation (GNU indent ain't it), this will wait.
  - make entire beast literate (yeah, right - way too much effort)
