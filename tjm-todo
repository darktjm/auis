- finish image rewrite:
  - maybe replace Gifify with SnapshotToFile for generic image output
  - maybe de-gif ez2html and other HTML-related stuff
  - look at raster library's import/export routines (at least xbm & xwd broken)
  - clean up export/import menus (combine into one, since it's so small)
  - support parameters (other than just quality) for export (needed for
    some image types, but probably OK to defer to external programs)
    - at the very least, support setting file type independently of name
- adew crashes a lot just doing the tutorial
- adew: no samples for mbuttonv or clicklistV in vallist document anymore
  - samples are pretty ugly anyway, at current font size.  Probably
    designed for 75dpi display, as usual.
- fix issues found doing load on all objects:
  - webcon spins if awww dies, and app can't exit any more
    - awww dies consistently, probably because the remote sites it
      depends on don't exist any more.
- fix issues in zip (or chuck in favor of figure):
  - schedapp should go away in favor of using ez on sched doc
  - schedv Clear button stays stuck down after clearing.
  - ltapp should go away in favor of storing background in output file
    somehow and only requiring one file for input.
    - I need to figure out what lt is even supposed to do, first.
  - zip edit palette is overritten by the figure you're editing; manual
    window resize is necessary to make them appear unmolested.
    Instead, it should convert the item being edited into a scrollable pane.
    It should also have a minimum size based on its own requirements,
    and add a scroll assembly around itself if there isn't enough room.
    This will generally force the user to resize the window for
    usability.
  - all zip figures have text whose size is in points, but is assumed to be
    a particular number of pixels.  Text is independent of its surroundings,
    so the surroundings are overlapped if the text is too big.  Even the
    GUI, such as the symbol library listing, is all screwed up.  Everything
    assumes 75 DPI fonts, and probably Adobe fonts at that.  The schedule,
    for example, looks awful at 129pi.  Maybe it would be better if zip
    figures scaled *all* their dimensions based on display DPI, including
    line thickness.  The font mechanism in ATK does not support requesting
    fonts at a particular DPI.  There are routines to determine the
    resolution, but almost nobody uses them.  This would have to be stored in
    any file that makes assumptions about pixel sizes, and assumed to be
    75 if not present (although graphic defaults it to 80).  Right now,
    users appear to be AWidget and figure, although I have not looked
    into how well they use it.
  - updates often leave garbage on screen.  For example, Clear button of
    schedv leaves lots of bits of the old text on-screen until ^L is
    pressed.  Regular zip edits are also dirty.
  - clicking in features.zip gives "A view just clicked in is broken."
  - text does not scale with rest of figure (maybe other stuff as well,
    such as insets - who knows?)
- fix issues in html/htmlview or chuck:
  - doesn't support js, css, or any other html3+ features
  - pervasive use of fixed-sized buffers with no overflow checks
  - Possible to set title, but not to retrieve it.
  - probably many more...
- fix issues in htmltext/htmltextview or chuck:
  - doesn't support js, css, or any other html3+ features
    - but it does have "raw HTML" support, unlike html/htmlview.
  - crashes on "show raw HTML"
  - displays entire text red due to header being red
  - probably many more...
- use qsort to sort in deskey instead of external sort command
- adjusting controls doesn't always set modified flag for a document
- sometimes just loading a doc with controls sets modified flag for it
- valgrind access hit with dragon.zip - may be bug in XPutImage, or perhaps
  the way xgraphic abuses CreateImage() to create a template image and
  fills in the values manually
- apparently can't load & execute ness files w/ event handlers from
  within ez.   Calling ness-load in the ness-stmt command-line discards
  the script when the command-line completes.
- there's no "evalbuffer" equivalent for ness, unless loaded as ness.
  Actually, I could probably transfer the key bindings to use them in
  textview as well, but it's still missing evaluation of current
  selection, and ness-stmt is somewhat screwy as well (deletes most
  side effects on completion)
- compiling library ness should add all potential entry points to the
  proctable list printed by desckey.  Also, there should be a way to
  add a line of docs for exported functions similar to the proctable
  help string.
- recompiling some ness code after error crashes (found playing w/ letter.tmpl)
  not yet easily reproducable
- pagedown eventually stops working (e.g. editing 2rtf binary), even
  though scrollbar and cursor still work.  Maybe due to insistence on
  ending at the start of a paragraph (which, in and of itself, is a
  bad thing that makes page up/down weird and inconsistent)
- questionaire.msg ice cream question doesn't do anything
- org/treev: unfolded expands size, but doesn't shift tree to right
  if needed (i.e., left is severely cut off).  Also doesn't shift tree down
  for horizontal arrangement, but for some reason it allows moving scrollbar
  into negative area)
- org/bush/treev: kb navigation of nodes, printing (outline?)
  - note: there is actually printing, but it's retarded.  It doesn't
    display the whole tree, what it does print is all on one page, so it
    just cuts off if too big.  Rotating is even worse: nodes are cut off
    even though they fit.  Also, it's troff only, and can't be printed
    from ezprint.
- sometimes, bush's ^X^C action is to quit without confirmation
  (maybe has to do with bush not setting change flag correctly as well)
- hyperlink: don't update label if label isn't default (or at least
  allow undo of label change)
- printing doesn't really work right:
  - on auis.doc:
    - TOC looks OK in roff, but in ps it is not so hot:
      - unenumerated (-E does nothing in ps output)
      - arabic rather than lower-case roman page numbers
      - no vertical space between chapters.
    - roff sometimes has missing spaces at style boundaries, causing
      words to run together.
    - links are boxed with dotted lines in ps, solid in troff.  Also,
      troff boxes have some glitches:
      when at beginning of line, extends to left margin
      when it straddles the end of line, extends to left margin and no
        marking on pref. line.  Sometimes the vertical lines don't
	extend far enough left even in mid-line.
  - on AndrewProgramming.ez:
    - -E doesn't re-enumerate like the editor does, so don't use -E!
    - AndrewProgramming.ez does not mark sections and chapters properly
      so TOC is incomplete at best.
      - TOC is tolerably wrong in roff output, but in PS, it's a random
        looking mess.
  - troff insets ("stroffet") are sliently dropped in ps output.
    a warning of some sort would be nice.
  - Direct-to-PS was the trend at time of abandonment.  It was an
    extremely bad idea.  This places the burden of all text formatting
    on the PS generator.  I guess that in WYSIWYG fasion, they figured
    that if you can render it on screen, you can render it the same
    way on paper.  At the very least, the line breaking algorithm used
    for full justification is pretty awful compared to troff or TeX.
    Plus of course all of the troff tweaks in existing documents no
    longer work, but that's to be expected when using blank line to
    put a notice at the bottom of a page.
- enable mouse scroll wheel
- ending search should re-evaluate character in keymap, or something
  should be done to prevent e.g. cursor keys from inserting the 2nd char
  of their escape sequence into the doc if pressed (e.g. up -> A).
  - Or, make a way to declare a key combo as one unbreakable key
  - Or, redo entire keymap for 16-bit keys, and auto-convert old key
    sequences into new 16-bit keys, and never pass 2 chars for a
    single key.  16 bits also allows upper bits to be used as mod flags.
    Then again, just setting the high bit could indicate a longer
    sequence, unbreakable.
- pass unknown keys up the view hierarchy (e.g. pgup within inset often fails)
- provide method to override/supplement X key binding list.  Maybe make
  modifiers a canonically ordered prefix list (e.g. Esc-_scm1 for F1,
  and Esc-!scm1 for 1, but the latter would be hard to figure out what
  modifiers matter and which not, whereas we assume modifiers always
  matter in the former).
- implement addbutton init command properly (or remove)
  - current implementation just saves the commands in an unused list
    - need to check that it is unused in AMS as well, but probably is
  - Need to figure out what this command should do.  I suppose similar
    to the ness "on mouse" hook.  Need to find out when it's executed.
  - Need to at least provide a way to swap buttons w/o resorting to xmodmap.
- implement call-like command, to execute a command on document load
  [especially useful if this command is ness]
- add help-type hyperlink or other help button of some sort
  - add support for loading files directly in help, instead of just indexed
- org doesn't mark entire doc as modified when doc inset is modified
- view fixes:
  - Implement CanView() everywhere, and use it where needed.  It
    should not be so easy for users to crash ez.
  - Check all arguments to named procs for same reason.  Best method would
    be to convert all proc table entries that take 2nd arg or whose 1st
    arg is not given an explicit type to check to action-style procs.
    This forces them to check their argument types, at least from ness.
    It does nothing for key and menu callbacks, as far as I can tell.
    - also fail rather than crash on NULL 1st arg.
    - maybe even covert others as well, and remove the ability to
      produce non-action procs, or adjust DefineProc() to create an
      aaction automatically with a void 2nd arg for some backwards
      compatibility.
  - Ensure SetDataObject() works with NULL data object
- Get rid of ATKinit.  Use static variables with constructors instead.
- test all apps, all insets, all docs, etc.
  - squash any crashes
  - run valgrind on as much as possible
  - fix example docs to document C++-style code
  - find out purpose of every file installed in auis, and document.
    - get rid of or fill in all that stub documentation (e.g. "proctables")
- general cleanup:
  - remove all warnings
    2x flex output errors that probably can't be fixed:
    overhead/grefs:
    <stdout>:827:18: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    <stdout>:1522:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    <stdout>:2060:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    doc/mkbrowse:
    lex.yy.c:1494:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    lex.yy.c:2032:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]

    visibility errors that probably can't be fixed easily:
    atk/web:
    ./htmlform.H:68:7: warning: ‘htmlform’ declared with greater visibility than the type of its field ‘htmlform::fields’ [-Wattributes]
    ./htmlform.H:68:7: warning: ‘htmlform’ declared with greater visibility than the type of its field ‘htmlform::fields’ [-Wattributes]
    contrib/gofig:
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]

    Pointer aliasing issues that can't be fixed easily:
    contrib/gestures/gsestsrc/gdp:
    set.c:202:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
    set.c:269:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]

    gccmakedep errors that can't be fixed easily:
    overhead/genstatl: (depped before atk/im.H; runapp never compiled here)
    runapp.C:13:16: fatal error: im.H: No such file or directory
    [also various other code that depends on installed packages, when
    the dependent packages not installed, especially if shared dir such
    as magick or pcontrol]
  - remove externs in c files
  - remove all statics in header files, if possible (gads, help.h is awful)
  - Unfortunately, there is no easy, portable way to avoid exporting
    symbols from a library which are only shared between members of
    the library.  Then again, I could probably just add gcc-specific
    methods if gcc is detected (like I did with UNUSED and format
    attributes).  Or, I could put the symbols in a namespace named
    after the library, which would at least alleviate namespace pollution.
  - constify pointers if possible
    It's usually better to make structures const by default and cast them to
    non-const when known to be malloc'd than the other way around
      e.g. ErrorGuts() -> only cast if explicit free flag given
    The only exception is when one statically allocated structure uses
    constants, but all else is malloc'd.
      e.g. filetype.C: mapEntry.fileExtension
  - remove type casts if possible
    There's almost never a good reason to cast pointers (well, in C++,
    you have to cast void * to the destination type, but that's it).
      gcc has no "flag all explicit casts" warning flag.
      -Wint-conversion (on by default)
      -Wbad-function-cast
      -Wcast-qual
      -Wcast-align
      -Wconversion
      -Wuseless-cast
      -Wsign-conversion
      -Wfloat-conversion
      -Wint-to-pointer-cast (on by default)
      -Wpointer-to-int-cast (on by default)
  - remove any unsupportable code (i.e., old UNIX, DOS, OS/2)
  - remove any functions which duplicate standard functions (e.g. strdup)
  - make the sysdep stuff more conformant with what I support: Single
    UNIX by default; the only things in Linux-specific dirs and code is
    stuff which is actually Linux-dependent, like the way to generate
    shared objects (loading them is standardized), system paths and
    default commands (e.g. groff, /usr/share/man, etc.) and kernel
    access via proc and Linux-specific libc calls.  Also, update
    porting documents to get rid of obsolete assumptions, like <=14-char
    file names.  Also, update installation instructions as needed.
  - remove all uses of this-> in class methods
  - much of it is C++.  It might be a good idea to look for and remove
    Cisms where C++ does it differently (and presumably the same or better)
    (note that unlike some idiots, I don't consider cpp macros to be C-only)
    However, use of FILE * I/O is too entrenched to remove.
- find out and possibly remove additional CMU/MIT-specific crap
- build improvements
  - make it possible to build w/o simultaneous install
    It's possible to do "make Makefiles; make All", but some places depend
      on libs/headers from previous dirs to be installed
    This basically means that separate variables must store default ANDREWDIR
      and default installation dir (DESTDIR).  Right now, DESTDIR gets
      inserted into some code, and that's not good.
    This also means that DESTDIR must be used as include path and lib dir.
  - make it possible to use -k and -j (-k mostly works now)
  - make top-level Makefile not disappear w/ "make Makefiles"
  - fix corruption of flags (empty flags become -- eventually)
  - distclean target that removes .depends and Makefile
  - maybe just switch to cmake:
    - identify what config options I want to support, and make them
      all cmake options
    - replace all Imakefiles and related documentation.
- fix UniqueID() and friends:
  - try not to renumber everything every modification; messes up svn diff
  - try to limit to 32 bits to retain compatibility with older systems
- install or chuck atkbook examples
  - con: use getstats from atk/console.  Builds OK, but not sure what it does
  - flex: builds OK.  Not sure what it does
    - renamed dataobject to flexd to avoid conflict
    - seems to want to be renamed flexpair for compatibility with con
  - switcher: builds OK.  Not sure what it does
- figure out what ANSI standard ansitext refers to, and document it
- get rid of include/ prefix on all headers in doxygen
- maybe try converting doxy latex output to ez (rtf is hopeless, and
  like the rest of the www, html is javascript-laden bloated mess)
- maybe incorporate app.doc into application.H as well.
- change atom class to be pointer, and no longer force explicit pointer usage
  also removes issue of possible accidental deletion
- add atom::InternStatic which does not strdup (for static lifetime strings)
  - probably doesn't buy enough to be worthwhile, since most atoms are
    created dynamically.  Maybe using a buffer list for string storage
    would be more worthwhile.
- search for tjm comments and see if there are any TODOs there
Long-term:
  - add code snippet inset (or maybe just "style") for literate programming
  - make LaTeX a possible output format (and the default)
  - maybe add more sophisticated styles (e.g. static pre/post text, alt.
    formatting of numeric contents, etc.  Just like writedatestamp,
    but less intrusive and more flexible (i.e. w/ text flow) than an inset.
    Right now, the way of handling itemize/enumerate is to run a
    routine to add/remove them.  It would be much more reliable to have
    a special style for that.  Similarly, even enumeration of book
    sections is done programattically, possibly by the print routine
    itself.
  - unicode support
    - initially, only left-to-right.  Enough to deal with already.
      - don't ban any specific chars, including dir switchers, but don't
        necesarily render properly, either.
    - note that conveniently enough, 0xff (ATK view marker) is illegal in utf-8
    - XLoadQueryFont -> XCreateFontSet (comma-separated list of fonts);
      XFontStruct -> XFontSet; XDrawString -> XmbDrawString or
      Xutf8DrawString if defined(X_HAVE_UTF8_STRING);
      XTextWidth -> XmbTextExtents/Xutf8TextExtents
    - UTF-8 input should be normalized, and written out normalized.  No
      illegal or unnormalized UTF-8 should ever be supported, except
      on input.  Illegal is obvious, but normalization is to make string
      comparisons and searching sane.
    - provide Unicode-style sorting and degenerate comparisons
    - could just use BOM as an indicator that the text is UTF-8. Bumping
      the text inset version seems obvious, but text is in a lot more
      places than that.  *All* text should support UTF-8.  If an entire
      string is passed, it can be analyzed for encoding rather than
      requiring the BOM.
    - modify pipescript and datacat and other plain ASCII readers to
      auto-detect formats:
        - 7-bit ASCII
	- 8-bit UTF-8
	- Other 8-bit (assume iso-8859-1 and auto-convert to UTF-8)
      and always write unicode if 8-bit?  Or use cmd-line + pref to select
      Or use $LANG + cmd-line to select on input/output
    - map standard supplied fonts (esp. symbol and symbola) to UTF-8
  - internationalization support (probably just GNU gettext)
    currently menus can be replaced, but messages & the like cannot
  - truetype font support using Xft
    XFontWidth -> XftTextExtents8
    Xutf8TextExtents/XmbTextExtents -> XftTextExtentsUtf8
    XDrawString -> XftDrawString8
    Xutf8DrawString/XmbDrawString -> XftDrawStringUtf8(?)
  - undo
  - freedesktop.org integration
  - move from included bison to standard bison
  - look at removed mail-related stuff to see if anything useful got deleted
    (e.g. ez2ascii claims descendence from messages)
  - look at auis-6.3.1 to see if anything useful got dropped in 8.0
    - rdemo service: probably not worth looking at
    - class system: don't want to touch it
    - overhead/conv: ancient and useless
    - contrib/parsec: maybe
    - atk/music: only because it's referenced by other docs & demos
    - no patience to check big common dirs for missing individuals
  - see if there is an atk repository in /afs/andrew.cmu.edu/ with more
    recent changes to 8.x
  - maybe give the sourceforge atk project another chance and try
    harder to see if there is anything worth salvaging
    - jdm (Journeyman's Development Manager)? undoumented crap
    - mrtools? undocumented crap
    - AIX-specific "ToolChat" support? whatever.
    - Yet Another Crappy Build System - ugh, forget it
    - REXX and perl code within ez?  Not worth it.  If I replace ness
      with anything, it'll be lua.
    - given the renaming and moving shit around, it's hard to tell if
      they actually fixed any bugs, and probably more effort to refind
      and refix the bugs than to try to figure out what changed.
  - maybe reformat into a slightly less ugly coding style.  I fixed a
    few bugs due to bad if/else indentation, and I hate the indentation
    style used in general.  However, unless I can find a tool to do this
    without too much aggravation (GNU indent ain't it), this will wait.
  - make entire beast literate (yeah, right - way too much effort)
  - unicode-bidir support
