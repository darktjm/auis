- proclist docs:
  - add specific styles for parts of doc:
    - "proclistentry" -> hanging indent
    - "procentry" -> bold
    - "procparm" -> italic
    - "proctype" -> normal (for "action" and parameter types)
    - "prockey" -> typewriter (for keys)
    - "procmenu" -> normal (or sans?) (for menu names)
    - "procmenuwhere" -> normal (or italic/small?) for ~ part of menu names
  - maybe style the menu entries somewhat.  Maybe move ness notes to 1st
    line, so bindings/menus are the only thing that follow doc line.
  - document that which is not documented.
    - add/correct doc strings as needed
  - ensure a link from main to proc where posssible (some done; missed some)
  - check proctable's type field, and ensure 1st parameter is correct
    everywhere.  maybe reformat as: object[type] self (invalid in
    ness, but type is actually retained/checked in ness).  Then again,
    maybe just explain in procs that object parameters are given as
    the expected object type (e.g. textview), and do it that way.
  - document the fact that ness only supports real, integer, cstring,
    and ATK object for type checking.  All else is "unk".
    Also document Ness->C type conversion.  In particular, it only
    supports integer (int+bool), pointer (object), string (marker).
  - document the fact that for old-style proctables, ness just assumes
    that at least first call is correct, and type checks against that.
    That's sort of documented, but it should be in procs as well.
  - document fact that some proctable entries can return values, but
    ness only understands integer if not action
  - document fact that ness only understands 1 return value, and
    bindings ignore all return values.
  - generate procs' help topic listing dynamically, such as during help
    index install.
- style editor is garbage (probably mostly due to non-75dpi display):
  - always starts up looking like crap until ^L
  - moving the window around, or resizing, or looking at it funny will
    cause it to look like crap again, requiring another ^L
  - Tab stop editor's text is way too big (setting measurement to cm or
    pt causes overlap).
  - Margin/indent doesn't move indent with margin as documented.
  - Margin/tabstop leaves artifacts while moving.
  - Can't scroll style list at upper-right if too many styles
  - setting bg colors is impermanent
    - setting both robgcolor and bgcolor causes read-only text to have
      bgcolor on actual text, but robgcolor where there is no text.
    - robgcolor should be a preference as well, not just a style setting
    - addfiletype template not applied on read-only files
  - style.doc talks a lot about parameters and functions, but not at
    all about what the styles actually *mean*.  Lookz tries a little
    harder to describe what they do, but is still pretty crappy, and is
    somewhat obsolete, and missing a lot, and oriented towards UI rather
    than API.  I'll probably have to scour the text display and
    PS/Troff conversion to figure it out, which takes forever and tells
    tells me nothing of what the designers actually intended. <sigh>
  - lookz really needs a "preview text" field
- unkonwn requires manual ^L after inserting raw data
- dired-regexp-select doesn't seem to work (selects weird stuff)
  - works perfenctly in some dirs, and badly in others.  Not sure why.
- only way to give argument in ness is dokeys("^Uddd")
- argument arbitrarily limited to 64K via keyboard, but unlimited in ProvideArg
  - no negative arguments, except via ProvideArg
- bdffont font face dialog is restricted to within window, and may be
  chopped off with no way to scroll.  Other choice dialogs may have
  similar issue.
- build or chuck wsactions.C butactions.C colorv.C colormapv.C colormap.C
- build all tests and run them
- text doesn't have overstrike mode, apparently.  Only srctext.
- all that effort to get table sizing to work properly seems to have done
  almost nothing.  Even after more fixes, text insets do not auto-size
  properly.  See e.g. xkeys.help.  And, really, choosing 99 is a stupid
  default.  It should size all text and have a default number width
  (in characters, not pixels!) and expand that if the actual width is
  larger.
- vertical scrolling around table insets is broken.  See xkeys.help:
  - inset size is assumed to be very small, so at top & bottom big
    scrollbar handle, even though most space is in middle.
  - bottom "arrow" button does nothing to scroll within table itself,
    but top "arrow" button works fine.
  - nonetheless, moving by clicking in trough is accurate.
- compchar-compose2 doesn't show styled chars w/ style, so using it with
  the symbol/symbola aliases is worthless.
- maybe audit lib/compchars/comps
- finish image rewrite:
  - maybe replace Gifify with SnapshotToFile for generic image output
  - maybe de-gif ez2html and other HTML-related stuff
  - look at raster library's import/export routines (at least xbm & xwd broken)
  - clean up export/import menus (combine into one, since it's so small)
  - support parameters (other than just quality) for export (needed for
    some image types, but probably OK to defer to external programs)
    - at the very least, support setting file type independently of name
- there should be a way to do avalue/avalueflex types better in Ness
  - can't do "real" args or return type on proctable action calls (callCfunc).
  - can't do "named" arguments
  - can't even really call InterpretString() to do that work, except via metax
  - can't deal with returned avalue array from actions (only 1st ret val)
    - could return as an InterpretString()-style value, I guess,
      except that it could only support known types
    - could support multiple return values:  x, y := f(x); if less
      returned y becomes "unset" (but there is no "is unset" test)
- adew issues
  - sliders behave oddly, not following mouse at all really
  - questionnaire.msg's send button requires manual ^L to make send
    button expand.
  - sometimes just loading a doc with controls sets modified flag for it
  - There should be a way to control inset view sizes better (at least
    reset either/both direction fixed size so inset can auto-size itself)
  - String slider/String thumb should have way to statically set text array.
    Mabye also clicklistV
  - single-letter buttons don't vertically align text in sbutton mode
    since they are assumed to be icons and are placed/sized differently.
  - after setting values, the values are cleared, and to restore, you
    have to move away and back again.
  - enterstrV/mentertextV/clicklistV don't allow setting text part's style
  - should be able to set default size of arbcon popup (i.e., smaller)
  - adjusting controls doesn't always set modified flag for a document
- fix issues found doing load on all objects:
  - webcon spins if awww dies, and app can't exit any more
    - awww dies consistently, probably because the remote sites it
      depends on don't exist any more.
- remove "-thru-command" variants of filter and have the regular
  versions not prompt if non-NULL, non-empty arg present.
- fix issues in zip (or chuck in favor of figure):
  - some zip key bindings overlap: Esc-z-i, Esc-z-o, Esc-b (ltv)
  - schedapp should go away in favor of using ez on sched doc
  - schedv Clear button stays stuck down after clearing.
  - ltapp should go away in favor of storing background in output file
    somehow and only requiring one file for input.
    - I need to figure out what lt is even supposed to do, first.
  - zip edit palette is overritten by the figure you're editing; manual
    window resize is necessary to make them appear unmolested.
    Instead, it should convert the item being edited into a scrollable pane.
    It should also have a minimum size based on its own requirements,
    and add a scroll assembly around itself if there isn't enough room.
    This will generally force the user to resize the window for
    usability.
  - all zip figures have text whose size is in points, but is assumed to be
    a particular number of pixels.  Text is independent of its surroundings,
    so the surroundings are overlapped if the text is too big.  Even the
    GUI, such as the symbol library listing, is all screwed up.  Everything
    assumes 75 DPI fonts, and probably Adobe fonts at that.  The schedule,
    for example, looks awful at 129pi.  Maybe it would be better if zip
    figures scaled *all* their dimensions based on display DPI, including
    line thickness.  The font mechanism in ATK does not support requesting
    fonts at a particular DPI.  There are routines to determine the
    resolution, but almost nobody uses them.  This would have to be stored in
    any file that makes assumptions about pixel sizes, and assumed to be
    75 if not present (although graphic defaults it to 80).  Right now,
    users appear to be AWidget and figure, although I have not looked
    into how well they use it.
  - updates often leave garbage on screen.  For example, Clear button of
    schedv leaves lots of bits of the old text on-screen until ^L is
    pressed.  Regular zip edits are also dirty.
  - clicking in features.zip gives "A view just clicked in is broken."
  - text does not scale with rest of figure (maybe other stuff as well,
    such as insets - who knows?)
- fix issues in html/htmlview or chuck:
  - doesn't support js, css, or any other html3+ features
  - pervasive use of fixed-sized buffers with no overflow checks
  - Possible to set title, but not to retrieve it.
  - probably many more...
- fix issues in htmltext/htmltextview or chuck:
  - doesn't support js, css, or any other html3+ features
    - but it does have "raw HTML" support, unlike html/htmlview.
  - crashes on "show raw HTML"
  - displays entire text red due to header being red
  - probably many more...
- use qsort to sort in deskey instead of external sort command
  - likewise with sort command?  (it is so screwy it's not worth it)
  - also audit all uses of system/popen/topen/qopen and maybe eliminate
- valgrind access hit with dragon.zip - may be bug in XPutImage, or perhaps
  the way xgraphic abuses CreateImage() to create a template image and
  fills in the values manually
- apparently can't load & execute ness files w/ event handlers from
  within ez.   Calling ness-load in the ness-stmt command-line discards
  the script when the command-line completes.
- there's no "evalbuffer" equivalent for ness, unless loaded as ness.
  Actually, I could probably transfer the key bindings to use them in
  textview as well, but it's still missing evaluation of current
  selection, and ness-stmt is somewhat screwy as well (deletes most
  side effects on completion)
- compiling library ness should add all potential entry points to the
  proctable list printed by desckey.  Also, there should be a way to
  add a line of docs for exported functions similar to the proctable
  help string.
- recompiling some ness code after error crashes (found playing w/ letter.tmpl)
  not yet easily reproducable
- pageup/pagedown insist on placing cursor at beginning of paragraph.  I
  fixed it so it can move past paragraphs that are larger than 1
  screen, but this behavior is still weird.
- org/treev: unfolded expands size, but doesn't shift tree to right
  if needed (i.e., left is severely cut off).  Also doesn't shift tree down
  for horizontal arrangement, but for some reason it allows moving scrollbar
  into negative area)
- org/bush/treev: kb navigation of nodes, printing (outline?)
  - note: there is actually printing, but it's retarded.  It doesn't
    display the whole tree, what it does print is all on one page, so it
    just cuts off if too big.  Rotating is even worse: nodes are cut off
    even though they fit.  Also, it's troff only, and can't be printed
    from ezprint.
- way too many mouse-only activities; almost everything should instead
  be scriptable.  Then again, maybe it's to encourage use of C rather
  than Ness, which is a good thing, I guess.
  - most egregious is inability to exit current inset w/o clicking.
    - and, for that matter, resizing insets and table columns/rows, or
      moving separators such as lpair's
  - bdffont, raster, zip, figure, layout, lset, etc.
- sometimes, bush's ^X^C action is to quit without confirmation
  (maybe has to do with bush not setting change flag correctly as well)
- chart doesn't set the file name when loading, which it needs for
  some of its quirky non-ATK routines.  chartapp did that, but I deleted it
- chart: proper printing. 
  Right now, its PS-only (which is OK, I guess), but it can't be
  scaled or altered in any way, and it can only be "printed" via its own
  Print procedure, which bypasses ATK's printing and does a terrible job.
- chart: drop custom quit & save in favor of standards
- hyperlink: don't update label if label isn't default (or at least
  allow undo of label change)
- printing doesn't really work right:
  - on auis.doc:
    - TOC looks OK in roff, but in ps it is not so hot:
      - unenumerated (-E does nothing in ps output)
      - arabic rather than lower-case roman page numbers for TOC itself
      - no vertical space between chapters.
    - roff sometimes has missing spaces at style boundaries, causing
      words to run together.
    - links are boxed with dotted lines in ps, solid in troff.  Also,
      troff boxes have some glitches:
      when at beginning of line, extends to left margin
      when it straddles the end of line, extends to left margin and no
        marking on pref. line.  Sometimes the vertical lines don't
	extend far enough left even in mid-line.
  - on AndrewProgramming.ez:
    - -E doesn't re-enumerate like the editor does, so don't use -E!
    - AndrewProgramming.ez does not mark sections and chapters properly
      so TOC is incomplete at best.
      - TOC is tolerably wrong in roff output, but in PS, it's a random
        looking mess.
  - troff insets ("stroffet") are sliently dropped in ps output.
    a warning of some sort would be nice.
  - Direct-to-PS was the trend at time of abandonment.  It was an
    extremely bad idea.  This places the burden of all text formatting
    on the PS generator.  I guess that in WYSIWYG fasion, they figured
    that if you can render it on screen, you can render it the same
    way on paper.  At the very least, the line breaking algorithm used
    for full justification is pretty awful compared to troff or TeX.
    Plus of course all of the troff tweaks in existing documents no
    longer work, but that's to be expected when using blank lines to
    put a notice at the bottom of a page (rather than special spacer).
- enable mouse scroll wheel
- ending search should re-evaluate character in keymap, or something
  should be done to prevent e.g. cursor keys from inserting the 2nd char
  of their escape sequence into the doc if pressed (e.g. up -> A).
  - Or, make a way to declare a key combo as one unbreakable key
  - Or, redo entire keymap for 16-bit keys, and auto-convert old key
    sequences into new 16-bit keys, and never pass 2 chars for a
    single key.  16 bits also allows upper bits to be used as mod flags.
    Then again, just setting the high bit could indicate a longer
    sequence, unbreakable.
- pass unknown keys up the view hierarchy (e.g. pgup within inset often fails)
  [actually, it's just impossible to enter/exit an inset via keyboard afaict]
- provide method to override/supplement X key binding list.  Maybe make
  modifiers a canonically ordered prefix list (e.g. Esc-_scm1 for F1,
  and Esc-!scm1 for 1, but the latter would be hard to figure out what
  modifiers matter and which not, whereas we assume modifiers always
  matter in the former).
- put undocumented init file stuff into initfls.help.
  Also, move or copy how to pass arguments to actions from procs.help.
- implement addbutton init command properly (or remove)
  - current implementation just saves the commands in an unused list
    - need to check that it is unused in AMS as well, but probably is
  - Need to figure out what this command should do.  ness "on mouse" hook
    only works on celviews, so I'd need to make a hook at a lower level,
    like either view itself, or better yet, callers of Hit() in the
    first place.  Then again, it might be safer to use some sort of
    wrapper view like celview but without arbiter integration.
  - Need to at least provide a way to swap buttons w/o resorting to xmodmap.
    That sounds like a job for xgraphic/xim, though.
- implement call-like command, to execute a command on document load
  [especially useful if this command is ness].  Might be best to add as
  one of those parameter arguments in the addfiletype, so it's even file
  specific.
- add emacs-like parameters-within-comments to srctext
- add help-type hyperlink or other help button of some sort
  - maybe just add support for helptopic style's active nature to textview
    - in that case, add more generic "hit action" support to styles,
      passing hit text pos and style (env) boundaries and name.
  - add support for loading files directly in help, instead of just indexed
- org doesn't mark entire doc as modified when doc inset is modified
- view fixes:
  - Implement CanView() everywhere, and use it where needed.  It
    should not be so easy for users to crash ez.
  - Check all arguments to named procs for same reason.  Best method would
    be to convert all proc table entries that take 2nd arg or whose 1st
    arg is not given an explicit type to check to action-style procs.
    This forces them to check their argument types.
    - also fail rather than crash on NULL 1st arg.
    - maybe even covert others as well, and remove the ability to
      produce non-action procs, or adjust DefineProc() to create an
      aaction automatically with a void 2nd arg for some backwards
      compatibility.
  - Ensure SetDataObject() works with NULL data object
- Get rid of ATKinit.  Use static variables with constructors instead.
- test all apps, all insets, all docs, etc.
  - squash any crashes
  - run valgrind on as much as possible
  - fix example docs to document C++-style code
  - find out purpose of every file installed in auis, and document.
    - get rid of or fill in all that stub documentation (e.g. "proctables")
- general cleanup:
  - remove all warnings
    2x flex output errors that probably can't be fixed:
    overhead/grefs:
    <stdout>:827:18: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    <stdout>:1522:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    <stdout>:2060:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    doc/mkbrowse:
    lex.yy.c:1494:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    lex.yy.c:2032:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]

    visibility errors that probably can't be fixed easily:
    atk/web:
    ./htmlform.H:68:7: warning: ‘htmlform’ declared with greater visibility than the type of its field ‘htmlform::fields’ [-Wattributes]
    ./htmlform.H:68:7: warning: ‘htmlform’ declared with greater visibility than the type of its field ‘htmlform::fields’ [-Wattributes]
    contrib/gofig:
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]
    ./gofig.H:73:7: warning: ‘gofig’ declared with greater visibility than the type of its field ‘gofig::stones’ [-Wattributes]

    Pointer aliasing issues that can't be fixed easily:
    contrib/gestures/gsestsrc/gdp:
    set.c:202:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
    set.c:269:4: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]

    gccmakedep errors that can't be fixed easily:
    overhead/genstatl: (depped before atk/im.H; runapp never compiled here)
    runapp.C:13:16: fatal error: im.H: No such file or directory
    [also various other code that depends on installed packages, when
    the dependent packages not installed, especially if shared dir such
    as magick or pcontrol]
  - remove externs in c files
  - remove all statics in header files, if possible (gads, help.h is awful)
  - Unfortunately, there is no easy, portable way to avoid exporting
    symbols from a library which are only shared between members of
    the library.  Then again, I could probably just add gcc-specific
    methods if gcc is detected (like I did with UNUSED and format
    attributes).  Or, I could put the symbols in a namespace named
    after the library, which would at least alleviate namespace pollution.
  - constify pointers if possible
    It's usually better to make structures const by default and cast them to
    non-const when known to be malloc'd than the other way around
      e.g. ErrorGuts() -> only cast if explicit free flag given
    The only exception is when one statically allocated structure uses
    constants, but all else is malloc'd.
      e.g. filetype.C: mapEntry.fileExtension
  - remove type casts if possible
    There's almost never a good reason to cast pointers (well, in C++,
    you have to cast void * to the destination type, but that's it).
      gcc has no "flag all explicit casts" warning flag.
      -Wint-conversion (on by default)
      -Wbad-function-cast
      -Wcast-qual
      -Wcast-align
      -Wconversion
      -Wuseless-cast
      -Wsign-conversion
      -Wfloat-conversion
      -Wint-to-pointer-cast (on by default)
      -Wpointer-to-int-cast (on by default)
  - remove any unsupportable code (i.e., old UNIX, DOS, OS/2)
  - remove any functions which duplicate standard functions (e.g. strdup)
  - make the sysdep stuff more conformant with what I support: Single
    UNIX by default; the only things in Linux-specific dirs and code is
    stuff which is actually Linux-dependent, like the way to generate
    shared objects (loading them is standardized), system paths and
    default commands (e.g. groff, /usr/share/man, etc.) and kernel
    access via proc and Linux-specific libc calls.  Also, update
    porting documents to get rid of obsolete assumptions, like <=14-char
    file names.  Also, update installation instructions as needed.
  - remove all unecessary uses of this-> in class methods
  - much of it is C++.  It might be a good idea to look for and remove
    Cisms where C++ does it differently (and presumably the same or better)
    (note that unlike some idiots, I don't consider cpp macros to be C-only)
    However, use of FILE * I/O is too entrenched to remove.
- find out and possibly remove additional CMU/MIT-specific crap
- build improvements
  - make it possible to build w/o simultaneous install
    It's possible to do "make Makefiles; make All", but some places depend
      on libs/headers from previous dirs to be installed
    This basically means that separate variables must store default ANDREWDIR
      and default installation dir (DESTDIR).  Right now, DESTDIR gets
      inserted into some code, and that's not good.
    This also means that DESTDIR must be used as include path and lib dir.
  - make it possible to use -k and -j (-k mostly works now)
  - make top-level Makefile not disappear w/ "make Makefiles"
  - fix corruption of flags (empty flags become -- eventually)
  - distclean target that removes .depends and Makefile
  - maybe just switch to cmake:
    - identify what config options I want to support, and make them
      all cmake options
    - replace all Imakefiles and related documentation.
- fix UniqueID() and friends:
  - try not to renumber everything every modification; messes up svn diff
  - try to limit to 32 bits to retain compatibility with older systems
- install or chuck atkbook examples
  - con: use getstats from atk/console.  Builds OK, but not sure what it does
  - flex: builds OK.  Not sure what it does
    - renamed dataobject to flexd to avoid conflict
    - seems to want to be renamed flexpair for compatibility with con
  - switcher: builds OK.  Not sure what it does
- figure out what ANSI standard ansitext refers to, and document it
- get rid of include/ prefix on all headers in doxygen
- maybe try converting doxy latex output to ez (rtf is hopeless, and
  like the rest of the www, html is javascript-laden bloated mess)
- maybe incorporate app.doc into application.H as well.
- change atom class to be pointer, and no longer force explicit pointer usage.
  Also removes issue of possible accidental deletion (but private detructor
  would do the same)
- add atom::InternStatic which does not strdup (for static lifetime strings)
  - probably doesn't buy enough to be worthwhile, since most atoms are
    created dynamically.  Maybe using a buffer list for string storage
    would be more worthwhile.
- search for tjm comments and see if there are any TODOs there

Long-term (as if any of the above weren't long term as well):

- style improvements:
  - have insets inherit style from surroundings without hackery
  - support line style & color for drawn styles (underline, overbar,
    strikethrough, dottedbox, changebar)
  - support alternating line bg colors (aka printout style)
  - support partial style override (i.e., use old + new flags)
    - need Noop to clear existing Set/Clear for flags; need to also see
      how tab stops work.  All other settings just override completely, anyway.
    - maybe make lookz understand this
  - implement even/odd margins, margin notes, multicolumn, and other TeX
    styles.
  - implement counter styles
    - need to think more about scopes
    - need to allow a default format for references:
      d = decimal, iI = roman, aA = alpha, 'xyz' = x, y, z, x, ..,
      'xyz'+ = x, y, z, xx, xy, xz, ...; "one:two:three" = one two three ..,
      $procname[(...)]$ -> procname(style, ctr, ctrval[, ...])
      allow delims/ws around such as (d) or i. or ($blah$)
      - proc: returns string or text object (for styled text, which is
        processed recursively).
    - need to add a current default display style for the counter
      e.g. chapter sets it to %{chapter}, section to
      %{chapter}%{section}, etc.
    - reference targets need to remember all active counters and their
      current value, style, default display style, etc.
    - reference displays default style, or can override with %-format.
    - maybe make lookz understand this as well
  - implement fully dynamic styling (maybe Function was for that?)
    Right now, the way of handling itemize/enumerate is to run a
    routine to add/remove them.  It would be much more reliable to have
    a special style for that.  Similarly, even enumeration of book
    sections is done manually, possibly by the print routine itself.
    - beforetext, aftertext (maybe with %{countername[:style]})
      for simple, no-coding-required common uses
    - modfunc = procname[(...)] -> procname(stylename, text[, ...])
      - proc is an action, so it can be Ness or C
      - extra args can be part of modfunc spec ('blah(extra args)') or extra
        style parameter ('modparms')
      - return type is either text or string.  For text styles are
	processed recursively.
      - when to call?  maybe once for each styled char, once at style
        start, and once at style end.
      - fixed parms:
        - renderer (interactive/graphic, printing/ps, printing/troff, etc)
	- "marker": text obj ref + pos + len
	- "environment", so beginning and end can be found easily
      - could make beforetext/aftertext supplied procs rather than special
        but handling copy/paste and some other issues might be easier if
	flags could be given as to what the style might do (e.g. add text
	at start, at end, in middle; remove text at start/end/middle; etc)
      - could specify more than one modfunc, to be applied in given order
      - issues with text replacement as a "style".  Currently only "show
        styles" does fake text, and does not really solve these entirely:
        - how to handle search?  maybe just make that a caveat of
	  using them for now (kind of how hidden works, for example)?  maybe
	  create artifical gaps at each active style boundary, and handle
	  active styles by styling into a buffer and handing that to search?
	  if "potential mod" flags used, as given above, this is much easier.
	- how to handle cursor movement?  treat as if solid block including
	  first following or preceding char, depending on where rendered?
	- how to handle copy/paste?  Maybe ignore problem for internal
	  copy/paste, but when exporting non-stream, render into a buffer
	  and hand that over?  What about streams that would look different
	  if styled for the selection rather than the whole (e.g. prefixed
	  text that doesn't include 1st char)?
	  if "potential mod" flags used, as given above, this is much easier.
    - like a mini-inset such as writestamp, but less intrusive (e.g. 
      text may wrap, no "delete inset?", no separate menus, inherits 
      styles from surroundings, etc.
    - maybe make lookz understand this as well
    - maybe implement Inglett's "stylecontroller" class (why isn't that
      distributed with ATK?  Why do I have to reimplement from scratch?)
      It is more of an active content changer than a style.  For example,
      Upper style would display text as upper-case, but stylecon actually
      converts stored text to upper-case, instead.  Also, itemize/enumerate
      still actively changes text, but now it's handled "automatically".
      Combined with the lack of undo, this makes switching styles destructive.
      The main advantage is laziness: very little existing code needs to
      change.  It also neatly solves some hard problems with "fake text"
      mentioned above.  Also, stylecon acts at the text editing stage,
      whereas my proposal acts in the same place as styles do:  the rendering
      stage.  There are advantages/disadvantages to either approach.
      - object created every time a piece of text is styled with this style:
        - text = text object
	- environment = specific application of the style
	- style = style object (really just environment->data.style)
      - NewEnvironment() called right after creation, when text
        and environment fields are valid.  Default relays to TextInserted.
      - TextChanged(reason, pos, len) - main callback.  If text actually
        inserted in own region, it may be called again (recursively).
	Default is to clip pos,len to actual styled region (and does nothing
	if nothing actually happened in styled region) and avoids recursion
	by ignoring if already in progress.  It then dispatches to one of
	the routines below.  Normally not overridden. [what are reasons?]
	Default, unless specified, for below actions is to do nothing.
	Called from inner-most env to outer-most.  I'm guessing left-to-right.
	I'm guessing original pos,len and env walk location saved (as a
	mark, so its locations move around a bit, and new one started
	recursively if any TextChanged() changes text.
        - TextDeleted(pos, len) - after deletion
        - TextInserted(mark text) - after insertion other than by paste or file
        - PreDeleted(mark text) - before deletion
	- TextRead(mark new) - after insertion while reading from file
	  (also pasting, since apparently that's how pasting works);
	  default is to defer to TextInserted.
	- TextReadFile() - entire text has just been read from file
	- TextReplaced(mark text) - ?? default defers to TextInserted.
	  [what does replaced mean?  like overwrite mode?]
      - some "future work" notes:
        - 1 & 2 (lookz support, multiple per style) apply to mine as well
        - 3 & 6 (view integration, different behavior on print/view) is part
	  of why it's better to do it at the renderer.
	  6 in particular is made very difficult by the desctructive nature
	- 4 (parameters):  My "action" approach already provides per-style
	  parameters.  Per-env seems overly complex and probably not worth it.
	- 7 seems unnecessary.  Why would it care what the current
	  surrounding style is?  Only the renderer should care.
	- 8 is an implementation detail.
	- 9 (Ness) could be done by adding an action that is called by default
	  for each change type
- improved regexes:
  - simple way to specify case sensitivity
  - full bre format: ranges (\{..\}), backrefs (\n)?
    - requires resumable regex, like mine.
  - extended regex format (toggle flag?): ? + | () {} [::] [==] [..]
    - requires resumable regex, like mine.
  - special indicators for styles ("has", "starts", "ends")
    e.g. .(*=bold)* gets text with "bold" style.
         (*<bold) starts a bold style region; (*>bold) ends it.
	 global style means "no styling at all"
    mabye e.g. .(*=[bold])* gets bolded text (regardless of style)
    - maybe make search dialog understand this as well.
- fix compile to take regexes for error message scanning
- add code snippet inset (or maybe just "style") for literate programming
- make LaTeX a possible output format (and the default)
- maybe make eq actually useful.  Probably not worth it, though.
- unicode support
  - initially, only left-to-right.  Enough to deal with already.
  - don't ban any specific chars, including dir switchers, but don't
      necesarily render properly, either.
  - note that conveniently enough, 0xff (ATK view marker) is illegal in utf-8
  - XLoadQueryFont -> XCreateFontSet (comma-separated list of fonts);
    XFontStruct -> XFontSet; XDrawString -> XmbDrawString or
    Xutf8DrawString if defined(X_HAVE_UTF8_STRING);
    XTextWidth -> XmbTextExtents/Xutf8TextExtents
  - UTF-8 input should be normalized, and written out normalized.  No
    illegal or unnormalized UTF-8 should ever be supported, except
    on input.  Illegal is obvious, but normalization is to make string
    comparisons and searching sane.
  - provide Unicode-style sorting and degenerate comparisons
  - could just use BOM as an indicator that the text is UTF-8. Bumping
    the text inset version seems obvious, but text is in a lot more
    places than that.  *All* text should support UTF-8.  If an entire
    string is passed, it can be analyzed for encoding rather than
    requiring the BOM.
  - modify pipescript and datacat and other plain ASCII readers to
    auto-detect formats:
      - 7-bit ASCII
      - 8-bit UTF-8
      - Other 8-bit (assume iso-8859-1 and auto-convert to UTF-8)
    and always write unicode if 8-bit?  Or use cmd-line + pref to select
    Or use $LANG + cmd-line to select on input/output
  - map standard supplied fonts (esp. symbol and symbola) to UTF-8
  - unicode-bidir support maybe later, as it would require more extensive
    changes to renderer and cursor movement
- internationalization support (probably just GNU gettext)
  currently menus can be replaced, but messages & the like cannot
- truetype font support using Xft
  XFontWidth -> XftTextExtents8
  Xutf8TextExtents/XmbTextExtents -> XftTextExtentsUtf8
  XDrawString -> XftDrawString8
  Xutf8DrawString/XmbDrawString -> XftDrawStringUtf8(?)
- undo
- freedesktop.org integration
- move from included bison to standard bison
- look at removed mail-related stuff to see if anything useful got deleted
  (e.g. ez2ascii claims descendence from messages)
 - look at auis-6.3.1 to see if anything useful got dropped in 8.0
  - rdemo service: probably not worth looking at
  - class system: don't want to touch it
  - overhead/conv: ancient and useless
  - contrib/parsec: maybe
  - atk/music: only because it's referenced by other docs & demos
  - no patience to check big common dirs for missing individuals
- see if there is an atk repository in /afs/andrew.cmu.edu/ with more
  recent changes to 8.x
- maybe give the sourceforge atk project another chance and try
  harder to see if there is anything worth salvaging
  - jdm (Journeyman's Development Manager)? undoumented crap
  - mrtools? undocumented crap
  - AIX-specific "ToolChat" support? whatever.
  - Yet Another Crappy Build System - ugh, forget it
  - REXX and perl code within ez?  Not worth it.  If I replace ness
    with anything, it'll be lua.
  - given the renaming and moving shit around, it's hard to tell if
    they actually fixed any bugs, and probably more effort to refind
    and refix the bugs than to try to figure out what changed.
- maybe reformat into a slightly less ugly coding style.  I fixed a
  few bugs due to bad if/else indentation, and I hate the indentation
  style used in general.  However, unless I can find a tool to do this
  without too much aggravation (GNU indent ain't it), this will wait.
- maybe make some of the ATK "todo" crap from papers (may have been 
  actually implemented, but not released; typical academic paper BS):
  - drag & drop protocol?  conf1992/Inglett
    need to look at actual protocls in use today, and ignore Inglett.
  - joint (multiuser) editing? conf.1992/Kedem
  - "smart" styles? conf.1993/Inglett (see above)
- make entire beast literate (yeah, right - way too much effort)
